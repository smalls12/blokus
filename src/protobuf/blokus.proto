syntax="proto3";
package blokus;

// the user will specify the location of the server first

// ================================================================================
// setup
// ================================================================================

// the user will then attempt to join the game hosted at said server
message RegisterReq {
    string username = 1;
    string uuid = 2;
}

// possible player ids
enum PlayerID {
    BLOKUS_PLAYER_ONE = 0;
    BLOKUS_PLAYER_TWO = 1;
    BLOKUS_PLAYER_THREE = 2;
    BLOKUS_PLAYER_FOUR = 3;
    BLOKUS_PLAYER_UNASSIGNED = 4;
}

// return information about this client
// this information is set by the server
message RegisterResp {
    enum RegistrationStatus {
        SUCCESSFUL = 0;
        UNSUCCESSFUL = 1;
    }

    RegistrationStatus status = 1;

    string username = 4;
    string uuid = 5;
    string error = 6;
}

// possible game modes
enum GameConfiguration {
    BLOKUS_TWO_PLAYER = 0;
    BLOKUS_FOUR_PLAYER = 1;
}

// players matched to their player ids
message Player {
    string uuid = 1;
    PlayerID id = 2;
}

// upon starting the game, inform all players of the player ids
message StartGameReq {
    GameConfiguration configuration = 1;
    repeated Player players = 2;
}

// ================================================================================
// gameplay
// ================================================================================
// once the game has been started the current user (whos turn it is) will submit game moves to the server
// the server will replicate these moves to the other users

// enum reference to the piece that was moved
enum Piece {
    I5 = 0;
    N = 1;
    V5 = 2;
    T5 = 3;
    U = 4;
    L5 = 5;
    Y = 6;
    Z5 = 7;
    W = 8;
    P = 9;
    X = 10;
    Z4 = 11;
    I4 = 12;
    L4 = 13;
    O = 14;
    T4 = 15;
    I3 = 16;
    V3 = 17;
    I2 = 18;
    I1 = 19;
    F = 20;
}

// the location on the board where the piece has moved
message Location {
    uint32 x_position = 1;
    uint32 y_position = 2;
}

message PlayerMoveReq {
    // id representing the move by the current user
    PlayerID id = 1;

    // this represents their move
    Piece piece = 2;
    Location location = 3;
}

// ================================================================================
// teardown
// ================================================================================
message EndGameReq {
    // id representing who won
    PlayerID id = 1;
}

enum Type {
    REGISTER = 0;
    START_GAME = 1;
    PLAYER_MOVE = 2;
    END_GAME = 3;
}

message Request {
    Type type = 1;
    RegisterReq register_req = 2;
    StartGameReq start_game_req = 3;
    PlayerMoveReq player_move_req = 4;
    EndGameReq end_game_req = 5;
}

message Response {
    Type type = 1;
    bool success = 2;

    RegisterResp register_resp = 3;
}

message Message {
    // this enum tracks the type of message
    enum MsgType {
        REQUEST = 0;
        RESPONSE = 1;
    }

    MsgType type = 1;
    string uuid = 2; // uuid of sender
    Request request = 3;
    Response response = 4; 
    
}