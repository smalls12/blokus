// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blokus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "blokus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace blockus {
class PlayerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Player>
     _instance;
} _Player_default_instance_;
class JoinGameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JoinGameReq>
     _instance;
} _JoinGameReq_default_instance_;
class JoinGameRespDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JoinGameResp>
     _instance;
} _JoinGameResp_default_instance_;
class StartGameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StartGameReq>
     _instance;
} _StartGameReq_default_instance_;
class StartGameRespDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StartGameResp>
     _instance;
} _StartGameResp_default_instance_;
class LocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Location>
     _instance;
} _Location_default_instance_;
class PlayerMoveReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerMoveReq>
     _instance;
} _PlayerMoveReq_default_instance_;
class PlayerMoveRespDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerMoveResp>
     _instance;
} _PlayerMoveResp_default_instance_;
class PlayerMoveSyncReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerMoveSyncReq>
     _instance;
} _PlayerMoveSyncReq_default_instance_;
class PlayerMoveSyncRespDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerMoveSyncResp>
     _instance;
} _PlayerMoveSyncResp_default_instance_;
class EndGameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EndGameReq>
     _instance;
} _EndGameReq_default_instance_;
class EndGameRespDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EndGameResp>
     _instance;
} _EndGameResp_default_instance_;
class BlockusRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlockusRequest>
     _instance;
} _BlockusRequest_default_instance_;
class BlockusResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlockusResponse>
     _instance;
} _BlockusResponse_default_instance_;
class BlockusProcessDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlockusProcess>
     _instance;
} _BlockusProcess_default_instance_;

namespace protobuf_blokus_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameReq, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameResp, player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGameReq, players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartGameResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, x_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, y_position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveReq, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveResp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveResp, piece_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveResp, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveSyncReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveSyncReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveSyncReq, piece_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveSyncReq, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMoveSyncResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGameReq, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGameResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, join_game_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, start_game_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, player_move_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, player_move_sync_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusRequest, end_game_req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, join_game_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, start_game_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, player_move_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, player_move_sync_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusResponse, end_game_resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusProcess, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusProcess, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockusProcess, response_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Player)},
  { 8, -1, sizeof(JoinGameReq)},
  { 14, -1, sizeof(JoinGameResp)},
  { 20, -1, sizeof(StartGameReq)},
  { 26, -1, sizeof(StartGameResp)},
  { 31, -1, sizeof(Location)},
  { 38, -1, sizeof(PlayerMoveReq)},
  { 44, -1, sizeof(PlayerMoveResp)},
  { 52, -1, sizeof(PlayerMoveSyncReq)},
  { 60, -1, sizeof(PlayerMoveSyncResp)},
  { 65, -1, sizeof(EndGameReq)},
  { 71, -1, sizeof(EndGameResp)},
  { 76, -1, sizeof(BlockusRequest)},
  { 87, -1, sizeof(BlockusResponse)},
  { 98, -1, sizeof(BlockusProcess)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGameResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartGameResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerMoveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerMoveResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerMoveSyncReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerMoveSyncResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EndGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EndGameResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockusProcess_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "blokus.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Player_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Player_default_instance_);_JoinGameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JoinGameReq_default_instance_);_JoinGameResp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JoinGameResp_default_instance_);_StartGameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StartGameReq_default_instance_);_StartGameResp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StartGameResp_default_instance_);_Location_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Location_default_instance_);_PlayerMoveReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerMoveReq_default_instance_);_PlayerMoveResp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerMoveResp_default_instance_);_PlayerMoveSyncReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerMoveSyncReq_default_instance_);_PlayerMoveSyncResp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerMoveSyncResp_default_instance_);_EndGameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EndGameReq_default_instance_);_EndGameResp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EndGameResp_default_instance_);_BlockusRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlockusRequest_default_instance_);_BlockusResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlockusResponse_default_instance_);_BlockusProcess_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlockusProcess_default_instance_);_JoinGameResp_default_instance_._instance.get_mutable()->player_ = const_cast< ::blockus::Player*>(
      ::blockus::Player::internal_default_instance());
  _PlayerMoveResp_default_instance_._instance.get_mutable()->location_ = const_cast< ::blockus::Location*>(
      ::blockus::Location::internal_default_instance());
  _PlayerMoveSyncReq_default_instance_._instance.get_mutable()->location_ = const_cast< ::blockus::Location*>(
      ::blockus::Location::internal_default_instance());
  _BlockusRequest_default_instance_._instance.get_mutable()->join_game_req_ = const_cast< ::blockus::JoinGameReq*>(
      ::blockus::JoinGameReq::internal_default_instance());
  _BlockusRequest_default_instance_._instance.get_mutable()->start_game_req_ = const_cast< ::blockus::StartGameReq*>(
      ::blockus::StartGameReq::internal_default_instance());
  _BlockusRequest_default_instance_._instance.get_mutable()->player_move_req_ = const_cast< ::blockus::PlayerMoveReq*>(
      ::blockus::PlayerMoveReq::internal_default_instance());
  _BlockusRequest_default_instance_._instance.get_mutable()->player_move_sync_req_ = const_cast< ::blockus::PlayerMoveSyncReq*>(
      ::blockus::PlayerMoveSyncReq::internal_default_instance());
  _BlockusRequest_default_instance_._instance.get_mutable()->end_game_req_ = const_cast< ::blockus::EndGameReq*>(
      ::blockus::EndGameReq::internal_default_instance());
  _BlockusResponse_default_instance_._instance.get_mutable()->join_game_resp_ = const_cast< ::blockus::JoinGameResp*>(
      ::blockus::JoinGameResp::internal_default_instance());
  _BlockusResponse_default_instance_._instance.get_mutable()->start_game_resp_ = const_cast< ::blockus::StartGameResp*>(
      ::blockus::StartGameResp::internal_default_instance());
  _BlockusResponse_default_instance_._instance.get_mutable()->player_move_resp_ = const_cast< ::blockus::PlayerMoveResp*>(
      ::blockus::PlayerMoveResp::internal_default_instance());
  _BlockusResponse_default_instance_._instance.get_mutable()->player_move_sync_resp_ = const_cast< ::blockus::PlayerMoveSyncResp*>(
      ::blockus::PlayerMoveSyncResp::internal_default_instance());
  _BlockusResponse_default_instance_._instance.get_mutable()->end_game_resp_ = const_cast< ::blockus::EndGameResp*>(
      ::blockus::EndGameResp::internal_default_instance());
  _BlockusProcess_default_instance_._instance.get_mutable()->request_ = const_cast< ::blockus::BlockusRequest*>(
      ::blockus::BlockusRequest::internal_default_instance());
  _BlockusProcess_default_instance_._instance.get_mutable()->response_ = const_cast< ::blockus::BlockusResponse*>(
      ::blockus::BlockusResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014blokus.proto\022\007blockus\"K\n\006Player\022#\n\005col"
      "or\030\001 \001(\0162\024.blockus.PlayerColor\022\n\n\002id\030\002 \001"
      "(\r\022\020\n\010username\030\003 \001(\t\"\037\n\013JoinGameReq\022\020\n\010u"
      "sername\030\001 \001(\t\"/\n\014JoinGameResp\022\037\n\006player\030"
      "\001 \001(\0132\017.blockus.Player\"0\n\014StartGameReq\022 "
      "\n\007players\030\001 \003(\0132\017.blockus.Player\"\017\n\rStar"
      "tGameResp\"2\n\010Location\022\022\n\nx_position\030\001 \001("
      "\r\022\022\n\ny_position\030\002 \001(\r\"\033\n\rPlayerMoveReq\022\n"
      "\n\002id\030\001 \001(\r\"`\n\016PlayerMoveResp\022\n\n\002id\030\001 \001(\r"
      "\022\035\n\005piece\030\002 \001(\0162\016.blockus.Piece\022#\n\010locat"
      "ion\030\003 \001(\0132\021.blockus.Location\"c\n\021PlayerMo"
      "veSyncReq\022\n\n\002id\030\001 \001(\r\022\035\n\005piece\030\002 \001(\0162\016.b"
      "lockus.Piece\022#\n\010location\030\003 \001(\0132\021.blockus"
      ".Location\"\024\n\022PlayerMoveSyncResp\"\030\n\nEndGa"
      "meReq\022\n\n\002id\030\001 \001(\r\"\r\n\013EndGameResp\"\230\003\n\016Blo"
      "ckusRequest\0221\n\004type\030\001 \001(\0162#.blockus.Bloc"
      "kusRequest.RequestType\022+\n\rjoin_game_req\030"
      "\002 \001(\0132\024.blockus.JoinGameReq\022-\n\016start_gam"
      "e_req\030\003 \001(\0132\025.blockus.StartGameReq\022/\n\017pl"
      "ayer_move_req\030\004 \001(\0132\026.blockus.PlayerMove"
      "Req\0228\n\024player_move_sync_req\030\005 \001(\0132\032.bloc"
      "kus.PlayerMoveSyncReq\022)\n\014end_game_req\030\006 "
      "\001(\0132\023.blockus.EndGameReq\"a\n\013RequestType\022"
      "\r\n\tJOIN_GAME\020\000\022\016\n\nSTART_GAME\020\001\022\017\n\013PLAYER"
      "_MOVE\020\002\022\024\n\020PLAYER_MOVE_SYNC\020\003\022\014\n\010END_GAM"
      "E\020\004\"\244\003\n\017BlockusResponse\0222\n\004type\030\001 \001(\0162$."
      "blockus.BlockusResponse.RequestType\022-\n\016j"
      "oin_game_resp\030\002 \001(\0132\025.blockus.JoinGameRe"
      "sp\022/\n\017start_game_resp\030\003 \001(\0132\026.blockus.St"
      "artGameResp\0221\n\020player_move_resp\030\004 \001(\0132\027."
      "blockus.PlayerMoveResp\022:\n\025player_move_sy"
      "nc_resp\030\005 \001(\0132\033.blockus.PlayerMoveSyncRe"
      "sp\022+\n\rend_game_resp\030\006 \001(\0132\024.blockus.EndG"
      "ameResp\"a\n\013RequestType\022\r\n\tJOIN_GAME\020\000\022\016\n"
      "\nSTART_GAME\020\001\022\017\n\013PLAYER_MOVE\020\002\022\024\n\020PLAYER"
      "_MOVE_SYNC\020\003\022\014\n\010END_GAME\020\004\"\273\001\n\016BlockusPr"
      "ocess\022-\n\004type\030\001 \001(\0162\037.blockus.BlockusPro"
      "cess.MsgType\022(\n\007request\030\002 \001(\0132\027.blockus."
      "BlockusRequest\022*\n\010response\030\003 \001(\0132\030.block"
      "us.BlockusResponse\"$\n\007MsgType\022\013\n\007REQUEST"
      "\020\000\022\014\n\010RESPONSE\020\001*7\n\013PlayerColor\022\010\n\004BLUE\020"
      "\000\022\007\n\003RED\020\001\022\t\n\005GREEN\020\002\022\n\n\006YELLOW\020\003*\240\001\n\005Pi"
      "ece\022\006\n\002I5\020\000\022\005\n\001N\020\001\022\006\n\002V5\020\002\022\006\n\002T5\020\003\022\005\n\001U\020"
      "\004\022\006\n\002L5\020\005\022\005\n\001Y\020\006\022\006\n\002Z5\020\007\022\005\n\001W\020\010\022\005\n\001P\020\t\022\005"
      "\n\001X\020\n\022\006\n\002Z4\020\013\022\006\n\002I4\020\014\022\006\n\002L4\020\r\022\005\n\001O\020\016\022\006\n\002"
      "T4\020\017\022\006\n\002I3\020\020\022\006\n\002V3\020\021\022\006\n\002I2\020\022\022\006\n\002I1\020\023b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "blokus.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_blokus_2eproto

const ::google::protobuf::EnumDescriptor* BlockusRequest_RequestType_descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_enum_descriptors[0];
}
bool BlockusRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlockusRequest_RequestType BlockusRequest::JOIN_GAME;
const BlockusRequest_RequestType BlockusRequest::START_GAME;
const BlockusRequest_RequestType BlockusRequest::PLAYER_MOVE;
const BlockusRequest_RequestType BlockusRequest::PLAYER_MOVE_SYNC;
const BlockusRequest_RequestType BlockusRequest::END_GAME;
const BlockusRequest_RequestType BlockusRequest::RequestType_MIN;
const BlockusRequest_RequestType BlockusRequest::RequestType_MAX;
const int BlockusRequest::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BlockusResponse_RequestType_descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_enum_descriptors[1];
}
bool BlockusResponse_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlockusResponse_RequestType BlockusResponse::JOIN_GAME;
const BlockusResponse_RequestType BlockusResponse::START_GAME;
const BlockusResponse_RequestType BlockusResponse::PLAYER_MOVE;
const BlockusResponse_RequestType BlockusResponse::PLAYER_MOVE_SYNC;
const BlockusResponse_RequestType BlockusResponse::END_GAME;
const BlockusResponse_RequestType BlockusResponse::RequestType_MIN;
const BlockusResponse_RequestType BlockusResponse::RequestType_MAX;
const int BlockusResponse::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BlockusProcess_MsgType_descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_enum_descriptors[2];
}
bool BlockusProcess_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlockusProcess_MsgType BlockusProcess::REQUEST;
const BlockusProcess_MsgType BlockusProcess::RESPONSE;
const BlockusProcess_MsgType BlockusProcess::MsgType_MIN;
const BlockusProcess_MsgType BlockusProcess::MsgType_MAX;
const int BlockusProcess::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerColor_descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_enum_descriptors[3];
}
bool PlayerColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Piece_descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_enum_descriptors[4];
}
bool Piece_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kColorFieldNumber;
const int Player::kIdFieldNumber;
const int Player::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&color_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:blockus.Player)
}

void Player::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&color_)) + sizeof(id_));
  _cached_size_ = 0;
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:blockus.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player& Player::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&color_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blockus.PlayerColor color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::blockus::PlayerColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blockus.Player.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.PlayerColor color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blockus.Player.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.PlayerColor color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blockus.Player.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.Player)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .blockus.PlayerColor color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(color_, other->color_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// .blockus.PlayerColor color = 1;
void Player::clear_color() {
  color_ = 0;
}
::blockus::PlayerColor Player::color() const {
  // @@protoc_insertion_point(field_get:blockus.Player.color)
  return static_cast< ::blockus::PlayerColor >(color_);
}
void Player::set_color(::blockus::PlayerColor value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:blockus.Player.color)
}

// uint32 id = 2;
void Player::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:blockus.Player.id)
  return id_;
}
void Player::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.Player.id)
}

// string username = 3;
void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:blockus.Player.username)
  return username_.GetNoArena();
}
void Player::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blockus.Player.username)
}
#if LANG_CXX11
void Player::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blockus.Player.username)
}
#endif
void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blockus.Player.username)
}
void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blockus.Player.username)
}
::std::string* Player::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:blockus.Player.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:blockus.Player.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:blockus.Player.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGameReq::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGameReq::JoinGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.JoinGameReq)
}
JoinGameReq::JoinGameReq(const JoinGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:blockus.JoinGameReq)
}

void JoinGameReq::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JoinGameReq::~JoinGameReq() {
  // @@protoc_insertion_point(destructor:blockus.JoinGameReq)
  SharedDtor();
}

void JoinGameReq::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGameReq::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinGameReq& JoinGameReq::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGameReq* JoinGameReq::New(::google::protobuf::Arena* arena) const {
  JoinGameReq* n = new JoinGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.JoinGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JoinGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.JoinGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "blockus.JoinGameReq.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.JoinGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.JoinGameReq)
  return false;
#undef DO_
}

void JoinGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.JoinGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blockus.JoinGameReq.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.JoinGameReq)
}

::google::protobuf::uint8* JoinGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.JoinGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "blockus.JoinGameReq.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.JoinGameReq)
  return target;
}

size_t JoinGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.JoinGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.JoinGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.JoinGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.JoinGameReq)
    MergeFrom(*source);
  }
}

void JoinGameReq::MergeFrom(const JoinGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.JoinGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void JoinGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.JoinGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameReq::CopyFrom(const JoinGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.JoinGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameReq::IsInitialized() const {
  return true;
}

void JoinGameReq::Swap(JoinGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGameReq::InternalSwap(JoinGameReq* other) {
  using std::swap;
  username_.Swap(&other->username_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGameReq::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGameReq

// string username = 1;
void JoinGameReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinGameReq::username() const {
  // @@protoc_insertion_point(field_get:blockus.JoinGameReq.username)
  return username_.GetNoArena();
}
void JoinGameReq::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blockus.JoinGameReq.username)
}
#if LANG_CXX11
void JoinGameReq::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blockus.JoinGameReq.username)
}
#endif
void JoinGameReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blockus.JoinGameReq.username)
}
void JoinGameReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blockus.JoinGameReq.username)
}
::std::string* JoinGameReq::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:blockus.JoinGameReq.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinGameReq::release_username() {
  // @@protoc_insertion_point(field_release:blockus.JoinGameReq.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinGameReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:blockus.JoinGameReq.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGameResp::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGameResp::JoinGameResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.JoinGameResp)
}
JoinGameResp::JoinGameResp(const JoinGameResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::blockus::Player(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:blockus.JoinGameResp)
}

void JoinGameResp::SharedCtor() {
  player_ = NULL;
  _cached_size_ = 0;
}

JoinGameResp::~JoinGameResp() {
  // @@protoc_insertion_point(destructor:blockus.JoinGameResp)
  SharedDtor();
}

void JoinGameResp::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void JoinGameResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGameResp::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinGameResp& JoinGameResp::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGameResp* JoinGameResp::New(::google::protobuf::Arena* arena) const {
  JoinGameResp* n = new JoinGameResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinGameResp::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.JoinGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
  _internal_metadata_.Clear();
}

bool JoinGameResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.JoinGameResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blockus.Player player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.JoinGameResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.JoinGameResp)
  return false;
#undef DO_
}

void JoinGameResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.JoinGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.Player player = 1;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.JoinGameResp)
}

::google::protobuf::uint8* JoinGameResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.JoinGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.Player player = 1;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.JoinGameResp)
  return target;
}

size_t JoinGameResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.JoinGameResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blockus.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.JoinGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGameResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGameResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.JoinGameResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.JoinGameResp)
    MergeFrom(*source);
  }
}

void JoinGameResp::MergeFrom(const JoinGameResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.JoinGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::blockus::Player::MergeFrom(from.player());
  }
}

void JoinGameResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.JoinGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameResp::CopyFrom(const JoinGameResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.JoinGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameResp::IsInitialized() const {
  return true;
}

void JoinGameResp::Swap(JoinGameResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGameResp::InternalSwap(JoinGameResp* other) {
  using std::swap;
  swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGameResp::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGameResp

// .blockus.Player player = 1;
bool JoinGameResp::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void JoinGameResp::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::blockus::Player& JoinGameResp::player() const {
  const ::blockus::Player* p = player_;
  // @@protoc_insertion_point(field_get:blockus.JoinGameResp.player)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::Player*>(
      &::blockus::_Player_default_instance_);
}
::blockus::Player* JoinGameResp::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::blockus::Player;
  }
  // @@protoc_insertion_point(field_mutable:blockus.JoinGameResp.player)
  return player_;
}
::blockus::Player* JoinGameResp::release_player() {
  // @@protoc_insertion_point(field_release:blockus.JoinGameResp.player)
  
  ::blockus::Player* temp = player_;
  player_ = NULL;
  return temp;
}
void JoinGameResp::set_allocated_player(::blockus::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.JoinGameResp.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartGameReq::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartGameReq::StartGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.StartGameReq)
}
StartGameReq::StartGameReq(const StartGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blockus.StartGameReq)
}

void StartGameReq::SharedCtor() {
  _cached_size_ = 0;
}

StartGameReq::~StartGameReq() {
  // @@protoc_insertion_point(destructor:blockus.StartGameReq)
  SharedDtor();
}

void StartGameReq::SharedDtor() {
}

void StartGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartGameReq::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartGameReq& StartGameReq::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartGameReq* StartGameReq::New(::google::protobuf::Arena* arena) const {
  StartGameReq* n = new StartGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.StartGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

bool StartGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.StartGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .blockus.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.StartGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.StartGameReq)
  return false;
#undef DO_
}

void StartGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.StartGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockus.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.StartGameReq)
}

::google::protobuf::uint8* StartGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.StartGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockus.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.StartGameReq)
  return target;
}

size_t StartGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.StartGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .blockus.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.StartGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.StartGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.StartGameReq)
    MergeFrom(*source);
  }
}

void StartGameReq::MergeFrom(const StartGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.StartGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void StartGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.StartGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGameReq::CopyFrom(const StartGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.StartGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGameReq::IsInitialized() const {
  return true;
}

void StartGameReq::Swap(StartGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartGameReq::InternalSwap(StartGameReq* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartGameReq::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartGameReq

// repeated .blockus.Player players = 1;
int StartGameReq::players_size() const {
  return players_.size();
}
void StartGameReq::clear_players() {
  players_.Clear();
}
const ::blockus::Player& StartGameReq::players(int index) const {
  // @@protoc_insertion_point(field_get:blockus.StartGameReq.players)
  return players_.Get(index);
}
::blockus::Player* StartGameReq::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:blockus.StartGameReq.players)
  return players_.Mutable(index);
}
::blockus::Player* StartGameReq::add_players() {
  // @@protoc_insertion_point(field_add:blockus.StartGameReq.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::blockus::Player >*
StartGameReq::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:blockus.StartGameReq.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::blockus::Player >&
StartGameReq::players() const {
  // @@protoc_insertion_point(field_list:blockus.StartGameReq.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartGameResp::StartGameResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.StartGameResp)
}
StartGameResp::StartGameResp(const StartGameResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blockus.StartGameResp)
}

void StartGameResp::SharedCtor() {
  _cached_size_ = 0;
}

StartGameResp::~StartGameResp() {
  // @@protoc_insertion_point(destructor:blockus.StartGameResp)
  SharedDtor();
}

void StartGameResp::SharedDtor() {
}

void StartGameResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartGameResp::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartGameResp& StartGameResp::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartGameResp* StartGameResp::New(::google::protobuf::Arena* arena) const {
  StartGameResp* n = new StartGameResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartGameResp::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.StartGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool StartGameResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.StartGameResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.StartGameResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.StartGameResp)
  return false;
#undef DO_
}

void StartGameResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.StartGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.StartGameResp)
}

::google::protobuf::uint8* StartGameResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.StartGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.StartGameResp)
  return target;
}

size_t StartGameResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.StartGameResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartGameResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.StartGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGameResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartGameResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.StartGameResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.StartGameResp)
    MergeFrom(*source);
  }
}

void StartGameResp::MergeFrom(const StartGameResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.StartGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartGameResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.StartGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGameResp::CopyFrom(const StartGameResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.StartGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGameResp::IsInitialized() const {
  return true;
}

void StartGameResp::Swap(StartGameResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartGameResp::InternalSwap(StartGameResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartGameResp::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartGameResp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kXPositionFieldNumber;
const int Location::kYPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_position_, &from.x_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_position_) -
    reinterpret_cast<char*>(&x_position_)) + sizeof(y_position_));
  // @@protoc_insertion_point(copy_constructor:blockus.Location)
}

void Location::SharedCtor() {
  ::memset(&x_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_position_) -
      reinterpret_cast<char*>(&x_position_)) + sizeof(y_position_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:blockus.Location)
  SharedDtor();
}

void Location::SharedDtor() {
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_position_) -
      reinterpret_cast<char*>(&x_position_)) + sizeof(y_position_));
  _internal_metadata_.Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x_position = 1;
  if (this->x_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x_position(), output);
  }

  // uint32 y_position = 2;
  if (this->y_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x_position = 1;
  if (this->x_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x_position(), target);
  }

  // uint32 y_position = 2;
  if (this->y_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y_position(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.Location)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 x_position = 1;
  if (this->x_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x_position());
  }

  // uint32 y_position = 2;
  if (this->y_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y_position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_position() != 0) {
    set_x_position(from.x_position());
  }
  if (from.y_position() != 0) {
    set_y_position(from.y_position());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  swap(x_position_, other->x_position_);
  swap(y_position_, other->y_position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// uint32 x_position = 1;
void Location::clear_x_position() {
  x_position_ = 0u;
}
::google::protobuf::uint32 Location::x_position() const {
  // @@protoc_insertion_point(field_get:blockus.Location.x_position)
  return x_position_;
}
void Location::set_x_position(::google::protobuf::uint32 value) {
  
  x_position_ = value;
  // @@protoc_insertion_point(field_set:blockus.Location.x_position)
}

// uint32 y_position = 2;
void Location::clear_y_position() {
  y_position_ = 0u;
}
::google::protobuf::uint32 Location::y_position() const {
  // @@protoc_insertion_point(field_get:blockus.Location.y_position)
  return y_position_;
}
void Location::set_y_position(::google::protobuf::uint32 value) {
  
  y_position_ = value;
  // @@protoc_insertion_point(field_set:blockus.Location.y_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerMoveReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerMoveReq::PlayerMoveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.PlayerMoveReq)
}
PlayerMoveReq::PlayerMoveReq(const PlayerMoveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:blockus.PlayerMoveReq)
}

void PlayerMoveReq::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

PlayerMoveReq::~PlayerMoveReq() {
  // @@protoc_insertion_point(destructor:blockus.PlayerMoveReq)
  SharedDtor();
}

void PlayerMoveReq::SharedDtor() {
}

void PlayerMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMoveReq::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerMoveReq& PlayerMoveReq::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerMoveReq* PlayerMoveReq::New(::google::protobuf::Arena* arena) const {
  PlayerMoveReq* n = new PlayerMoveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerMoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.PlayerMoveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.PlayerMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.PlayerMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.PlayerMoveReq)
  return false;
#undef DO_
}

void PlayerMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.PlayerMoveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.PlayerMoveReq)
}

::google::protobuf::uint8* PlayerMoveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.PlayerMoveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.PlayerMoveReq)
  return target;
}

size_t PlayerMoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.PlayerMoveReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.PlayerMoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMoveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerMoveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.PlayerMoveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.PlayerMoveReq)
    MergeFrom(*source);
  }
}

void PlayerMoveReq::MergeFrom(const PlayerMoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.PlayerMoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void PlayerMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.PlayerMoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMoveReq::CopyFrom(const PlayerMoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.PlayerMoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveReq::IsInitialized() const {
  return true;
}

void PlayerMoveReq::Swap(PlayerMoveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMoveReq::InternalSwap(PlayerMoveReq* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerMoveReq::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerMoveReq

// uint32 id = 1;
void PlayerMoveReq::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 PlayerMoveReq::id() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveReq.id)
  return id_;
}
void PlayerMoveReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerMoveResp::kIdFieldNumber;
const int PlayerMoveResp::kPieceFieldNumber;
const int PlayerMoveResp::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerMoveResp::PlayerMoveResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.PlayerMoveResp)
}
PlayerMoveResp::PlayerMoveResp(const PlayerMoveResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::blockus::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&piece_) -
    reinterpret_cast<char*>(&id_)) + sizeof(piece_));
  // @@protoc_insertion_point(copy_constructor:blockus.PlayerMoveResp)
}

void PlayerMoveResp::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&piece_) -
      reinterpret_cast<char*>(&location_)) + sizeof(piece_));
  _cached_size_ = 0;
}

PlayerMoveResp::~PlayerMoveResp() {
  // @@protoc_insertion_point(destructor:blockus.PlayerMoveResp)
  SharedDtor();
}

void PlayerMoveResp::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void PlayerMoveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMoveResp::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerMoveResp& PlayerMoveResp::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerMoveResp* PlayerMoveResp::New(::google::protobuf::Arena* arena) const {
  PlayerMoveResp* n = new PlayerMoveResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerMoveResp::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.PlayerMoveResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&piece_) -
      reinterpret_cast<char*>(&id_)) + sizeof(piece_));
  _internal_metadata_.Clear();
}

bool PlayerMoveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.PlayerMoveResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.Piece piece = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_piece(static_cast< ::blockus::Piece >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.PlayerMoveResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.PlayerMoveResp)
  return false;
#undef DO_
}

void PlayerMoveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.PlayerMoveResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .blockus.Piece piece = 2;
  if (this->piece() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->piece(), output);
  }

  // .blockus.Location location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.PlayerMoveResp)
}

::google::protobuf::uint8* PlayerMoveResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.PlayerMoveResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .blockus.Piece piece = 2;
  if (this->piece() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->piece(), target);
  }

  // .blockus.Location location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.PlayerMoveResp)
  return target;
}

size_t PlayerMoveResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.PlayerMoveResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blockus.Location location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .blockus.Piece piece = 2;
  if (this->piece() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->piece());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMoveResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.PlayerMoveResp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMoveResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerMoveResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.PlayerMoveResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.PlayerMoveResp)
    MergeFrom(*source);
  }
}

void PlayerMoveResp::MergeFrom(const PlayerMoveResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.PlayerMoveResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::blockus::Location::MergeFrom(from.location());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.piece() != 0) {
    set_piece(from.piece());
  }
}

void PlayerMoveResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.PlayerMoveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMoveResp::CopyFrom(const PlayerMoveResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.PlayerMoveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveResp::IsInitialized() const {
  return true;
}

void PlayerMoveResp::Swap(PlayerMoveResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMoveResp::InternalSwap(PlayerMoveResp* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(id_, other->id_);
  swap(piece_, other->piece_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerMoveResp::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerMoveResp

// uint32 id = 1;
void PlayerMoveResp::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 PlayerMoveResp::id() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveResp.id)
  return id_;
}
void PlayerMoveResp::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveResp.id)
}

// .blockus.Piece piece = 2;
void PlayerMoveResp::clear_piece() {
  piece_ = 0;
}
::blockus::Piece PlayerMoveResp::piece() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveResp.piece)
  return static_cast< ::blockus::Piece >(piece_);
}
void PlayerMoveResp::set_piece(::blockus::Piece value) {
  
  piece_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveResp.piece)
}

// .blockus.Location location = 3;
bool PlayerMoveResp::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void PlayerMoveResp::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::blockus::Location& PlayerMoveResp::location() const {
  const ::blockus::Location* p = location_;
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveResp.location)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::Location*>(
      &::blockus::_Location_default_instance_);
}
::blockus::Location* PlayerMoveResp::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::blockus::Location;
  }
  // @@protoc_insertion_point(field_mutable:blockus.PlayerMoveResp.location)
  return location_;
}
::blockus::Location* PlayerMoveResp::release_location() {
  // @@protoc_insertion_point(field_release:blockus.PlayerMoveResp.location)
  
  ::blockus::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void PlayerMoveResp::set_allocated_location(::blockus::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.PlayerMoveResp.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerMoveSyncReq::kIdFieldNumber;
const int PlayerMoveSyncReq::kPieceFieldNumber;
const int PlayerMoveSyncReq::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerMoveSyncReq::PlayerMoveSyncReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.PlayerMoveSyncReq)
}
PlayerMoveSyncReq::PlayerMoveSyncReq(const PlayerMoveSyncReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::blockus::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&piece_) -
    reinterpret_cast<char*>(&id_)) + sizeof(piece_));
  // @@protoc_insertion_point(copy_constructor:blockus.PlayerMoveSyncReq)
}

void PlayerMoveSyncReq::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&piece_) -
      reinterpret_cast<char*>(&location_)) + sizeof(piece_));
  _cached_size_ = 0;
}

PlayerMoveSyncReq::~PlayerMoveSyncReq() {
  // @@protoc_insertion_point(destructor:blockus.PlayerMoveSyncReq)
  SharedDtor();
}

void PlayerMoveSyncReq::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void PlayerMoveSyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMoveSyncReq::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerMoveSyncReq& PlayerMoveSyncReq::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerMoveSyncReq* PlayerMoveSyncReq::New(::google::protobuf::Arena* arena) const {
  PlayerMoveSyncReq* n = new PlayerMoveSyncReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerMoveSyncReq::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.PlayerMoveSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&piece_) -
      reinterpret_cast<char*>(&id_)) + sizeof(piece_));
  _internal_metadata_.Clear();
}

bool PlayerMoveSyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.PlayerMoveSyncReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.Piece piece = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_piece(static_cast< ::blockus::Piece >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.PlayerMoveSyncReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.PlayerMoveSyncReq)
  return false;
#undef DO_
}

void PlayerMoveSyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.PlayerMoveSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .blockus.Piece piece = 2;
  if (this->piece() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->piece(), output);
  }

  // .blockus.Location location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.PlayerMoveSyncReq)
}

::google::protobuf::uint8* PlayerMoveSyncReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.PlayerMoveSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .blockus.Piece piece = 2;
  if (this->piece() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->piece(), target);
  }

  // .blockus.Location location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.PlayerMoveSyncReq)
  return target;
}

size_t PlayerMoveSyncReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.PlayerMoveSyncReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blockus.Location location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .blockus.Piece piece = 2;
  if (this->piece() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->piece());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMoveSyncReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.PlayerMoveSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMoveSyncReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerMoveSyncReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.PlayerMoveSyncReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.PlayerMoveSyncReq)
    MergeFrom(*source);
  }
}

void PlayerMoveSyncReq::MergeFrom(const PlayerMoveSyncReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.PlayerMoveSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::blockus::Location::MergeFrom(from.location());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.piece() != 0) {
    set_piece(from.piece());
  }
}

void PlayerMoveSyncReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.PlayerMoveSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMoveSyncReq::CopyFrom(const PlayerMoveSyncReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.PlayerMoveSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveSyncReq::IsInitialized() const {
  return true;
}

void PlayerMoveSyncReq::Swap(PlayerMoveSyncReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMoveSyncReq::InternalSwap(PlayerMoveSyncReq* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(id_, other->id_);
  swap(piece_, other->piece_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerMoveSyncReq::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerMoveSyncReq

// uint32 id = 1;
void PlayerMoveSyncReq::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 PlayerMoveSyncReq::id() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveSyncReq.id)
  return id_;
}
void PlayerMoveSyncReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveSyncReq.id)
}

// .blockus.Piece piece = 2;
void PlayerMoveSyncReq::clear_piece() {
  piece_ = 0;
}
::blockus::Piece PlayerMoveSyncReq::piece() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveSyncReq.piece)
  return static_cast< ::blockus::Piece >(piece_);
}
void PlayerMoveSyncReq::set_piece(::blockus::Piece value) {
  
  piece_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveSyncReq.piece)
}

// .blockus.Location location = 3;
bool PlayerMoveSyncReq::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void PlayerMoveSyncReq::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::blockus::Location& PlayerMoveSyncReq::location() const {
  const ::blockus::Location* p = location_;
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveSyncReq.location)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::Location*>(
      &::blockus::_Location_default_instance_);
}
::blockus::Location* PlayerMoveSyncReq::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::blockus::Location;
  }
  // @@protoc_insertion_point(field_mutable:blockus.PlayerMoveSyncReq.location)
  return location_;
}
::blockus::Location* PlayerMoveSyncReq::release_location() {
  // @@protoc_insertion_point(field_release:blockus.PlayerMoveSyncReq.location)
  
  ::blockus::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void PlayerMoveSyncReq::set_allocated_location(::blockus::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.PlayerMoveSyncReq.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerMoveSyncResp::PlayerMoveSyncResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.PlayerMoveSyncResp)
}
PlayerMoveSyncResp::PlayerMoveSyncResp(const PlayerMoveSyncResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blockus.PlayerMoveSyncResp)
}

void PlayerMoveSyncResp::SharedCtor() {
  _cached_size_ = 0;
}

PlayerMoveSyncResp::~PlayerMoveSyncResp() {
  // @@protoc_insertion_point(destructor:blockus.PlayerMoveSyncResp)
  SharedDtor();
}

void PlayerMoveSyncResp::SharedDtor() {
}

void PlayerMoveSyncResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMoveSyncResp::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerMoveSyncResp& PlayerMoveSyncResp::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerMoveSyncResp* PlayerMoveSyncResp::New(::google::protobuf::Arena* arena) const {
  PlayerMoveSyncResp* n = new PlayerMoveSyncResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerMoveSyncResp::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.PlayerMoveSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PlayerMoveSyncResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.PlayerMoveSyncResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.PlayerMoveSyncResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.PlayerMoveSyncResp)
  return false;
#undef DO_
}

void PlayerMoveSyncResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.PlayerMoveSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.PlayerMoveSyncResp)
}

::google::protobuf::uint8* PlayerMoveSyncResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.PlayerMoveSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.PlayerMoveSyncResp)
  return target;
}

size_t PlayerMoveSyncResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.PlayerMoveSyncResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMoveSyncResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.PlayerMoveSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMoveSyncResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerMoveSyncResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.PlayerMoveSyncResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.PlayerMoveSyncResp)
    MergeFrom(*source);
  }
}

void PlayerMoveSyncResp::MergeFrom(const PlayerMoveSyncResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.PlayerMoveSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerMoveSyncResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.PlayerMoveSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMoveSyncResp::CopyFrom(const PlayerMoveSyncResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.PlayerMoveSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveSyncResp::IsInitialized() const {
  return true;
}

void PlayerMoveSyncResp::Swap(PlayerMoveSyncResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMoveSyncResp::InternalSwap(PlayerMoveSyncResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerMoveSyncResp::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerMoveSyncResp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndGameReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndGameReq::EndGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.EndGameReq)
}
EndGameReq::EndGameReq(const EndGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:blockus.EndGameReq)
}

void EndGameReq::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

EndGameReq::~EndGameReq() {
  // @@protoc_insertion_point(destructor:blockus.EndGameReq)
  SharedDtor();
}

void EndGameReq::SharedDtor() {
}

void EndGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndGameReq::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EndGameReq& EndGameReq::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndGameReq* EndGameReq::New(::google::protobuf::Arena* arena) const {
  EndGameReq* n = new EndGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.EndGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

bool EndGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.EndGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.EndGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.EndGameReq)
  return false;
#undef DO_
}

void EndGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.EndGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.EndGameReq)
}

::google::protobuf::uint8* EndGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.EndGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.EndGameReq)
  return target;
}

size_t EndGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.EndGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.EndGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EndGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.EndGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.EndGameReq)
    MergeFrom(*source);
  }
}

void EndGameReq::MergeFrom(const EndGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.EndGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void EndGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.EndGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndGameReq::CopyFrom(const EndGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.EndGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndGameReq::IsInitialized() const {
  return true;
}

void EndGameReq::Swap(EndGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndGameReq::InternalSwap(EndGameReq* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndGameReq::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndGameReq

// uint32 id = 1;
void EndGameReq::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 EndGameReq::id() const {
  // @@protoc_insertion_point(field_get:blockus.EndGameReq.id)
  return id_;
}
void EndGameReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.EndGameReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndGameResp::EndGameResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.EndGameResp)
}
EndGameResp::EndGameResp(const EndGameResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blockus.EndGameResp)
}

void EndGameResp::SharedCtor() {
  _cached_size_ = 0;
}

EndGameResp::~EndGameResp() {
  // @@protoc_insertion_point(destructor:blockus.EndGameResp)
  SharedDtor();
}

void EndGameResp::SharedDtor() {
}

void EndGameResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndGameResp::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EndGameResp& EndGameResp::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndGameResp* EndGameResp::New(::google::protobuf::Arena* arena) const {
  EndGameResp* n = new EndGameResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndGameResp::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.EndGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EndGameResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.EndGameResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.EndGameResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.EndGameResp)
  return false;
#undef DO_
}

void EndGameResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.EndGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.EndGameResp)
}

::google::protobuf::uint8* EndGameResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.EndGameResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.EndGameResp)
  return target;
}

size_t EndGameResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.EndGameResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndGameResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.EndGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EndGameResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndGameResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.EndGameResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.EndGameResp)
    MergeFrom(*source);
  }
}

void EndGameResp::MergeFrom(const EndGameResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.EndGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EndGameResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.EndGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndGameResp::CopyFrom(const EndGameResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.EndGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndGameResp::IsInitialized() const {
  return true;
}

void EndGameResp::Swap(EndGameResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndGameResp::InternalSwap(EndGameResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndGameResp::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndGameResp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockusRequest::kTypeFieldNumber;
const int BlockusRequest::kJoinGameReqFieldNumber;
const int BlockusRequest::kStartGameReqFieldNumber;
const int BlockusRequest::kPlayerMoveReqFieldNumber;
const int BlockusRequest::kPlayerMoveSyncReqFieldNumber;
const int BlockusRequest::kEndGameReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockusRequest::BlockusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.BlockusRequest)
}
BlockusRequest::BlockusRequest(const BlockusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_join_game_req()) {
    join_game_req_ = new ::blockus::JoinGameReq(*from.join_game_req_);
  } else {
    join_game_req_ = NULL;
  }
  if (from.has_start_game_req()) {
    start_game_req_ = new ::blockus::StartGameReq(*from.start_game_req_);
  } else {
    start_game_req_ = NULL;
  }
  if (from.has_player_move_req()) {
    player_move_req_ = new ::blockus::PlayerMoveReq(*from.player_move_req_);
  } else {
    player_move_req_ = NULL;
  }
  if (from.has_player_move_sync_req()) {
    player_move_sync_req_ = new ::blockus::PlayerMoveSyncReq(*from.player_move_sync_req_);
  } else {
    player_move_sync_req_ = NULL;
  }
  if (from.has_end_game_req()) {
    end_game_req_ = new ::blockus::EndGameReq(*from.end_game_req_);
  } else {
    end_game_req_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:blockus.BlockusRequest)
}

void BlockusRequest::SharedCtor() {
  ::memset(&join_game_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&join_game_req_)) + sizeof(type_));
  _cached_size_ = 0;
}

BlockusRequest::~BlockusRequest() {
  // @@protoc_insertion_point(destructor:blockus.BlockusRequest)
  SharedDtor();
}

void BlockusRequest::SharedDtor() {
  if (this != internal_default_instance()) delete join_game_req_;
  if (this != internal_default_instance()) delete start_game_req_;
  if (this != internal_default_instance()) delete player_move_req_;
  if (this != internal_default_instance()) delete player_move_sync_req_;
  if (this != internal_default_instance()) delete end_game_req_;
}

void BlockusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockusRequest::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockusRequest& BlockusRequest::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockusRequest* BlockusRequest::New(::google::protobuf::Arena* arena) const {
  BlockusRequest* n = new BlockusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.BlockusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && join_game_req_ != NULL) {
    delete join_game_req_;
  }
  join_game_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_game_req_ != NULL) {
    delete start_game_req_;
  }
  start_game_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_move_req_ != NULL) {
    delete player_move_req_;
  }
  player_move_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_move_sync_req_ != NULL) {
    delete player_move_sync_req_;
  }
  player_move_sync_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_game_req_ != NULL) {
    delete end_game_req_;
  }
  end_game_req_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool BlockusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.BlockusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blockus.BlockusRequest.RequestType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::blockus::BlockusRequest_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.JoinGameReq join_game_req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_game_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.StartGameReq start_game_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_game_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.PlayerMoveReq player_move_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_move_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_move_sync_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.EndGameReq end_game_req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_game_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.BlockusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.BlockusRequest)
  return false;
#undef DO_
}

void BlockusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.BlockusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.BlockusRequest.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .blockus.JoinGameReq join_game_req = 2;
  if (this->has_join_game_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->join_game_req_, output);
  }

  // .blockus.StartGameReq start_game_req = 3;
  if (this->has_start_game_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_game_req_, output);
  }

  // .blockus.PlayerMoveReq player_move_req = 4;
  if (this->has_player_move_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->player_move_req_, output);
  }

  // .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
  if (this->has_player_move_sync_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->player_move_sync_req_, output);
  }

  // .blockus.EndGameReq end_game_req = 6;
  if (this->has_end_game_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->end_game_req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.BlockusRequest)
}

::google::protobuf::uint8* BlockusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.BlockusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.BlockusRequest.RequestType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .blockus.JoinGameReq join_game_req = 2;
  if (this->has_join_game_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->join_game_req_, deterministic, target);
  }

  // .blockus.StartGameReq start_game_req = 3;
  if (this->has_start_game_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->start_game_req_, deterministic, target);
  }

  // .blockus.PlayerMoveReq player_move_req = 4;
  if (this->has_player_move_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->player_move_req_, deterministic, target);
  }

  // .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
  if (this->has_player_move_sync_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->player_move_sync_req_, deterministic, target);
  }

  // .blockus.EndGameReq end_game_req = 6;
  if (this->has_end_game_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->end_game_req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.BlockusRequest)
  return target;
}

size_t BlockusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.BlockusRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blockus.JoinGameReq join_game_req = 2;
  if (this->has_join_game_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->join_game_req_);
  }

  // .blockus.StartGameReq start_game_req = 3;
  if (this->has_start_game_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_game_req_);
  }

  // .blockus.PlayerMoveReq player_move_req = 4;
  if (this->has_player_move_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_move_req_);
  }

  // .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
  if (this->has_player_move_sync_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_move_sync_req_);
  }

  // .blockus.EndGameReq end_game_req = 6;
  if (this->has_end_game_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_game_req_);
  }

  // .blockus.BlockusRequest.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.BlockusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.BlockusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.BlockusRequest)
    MergeFrom(*source);
  }
}

void BlockusRequest::MergeFrom(const BlockusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.BlockusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_join_game_req()) {
    mutable_join_game_req()->::blockus::JoinGameReq::MergeFrom(from.join_game_req());
  }
  if (from.has_start_game_req()) {
    mutable_start_game_req()->::blockus::StartGameReq::MergeFrom(from.start_game_req());
  }
  if (from.has_player_move_req()) {
    mutable_player_move_req()->::blockus::PlayerMoveReq::MergeFrom(from.player_move_req());
  }
  if (from.has_player_move_sync_req()) {
    mutable_player_move_sync_req()->::blockus::PlayerMoveSyncReq::MergeFrom(from.player_move_sync_req());
  }
  if (from.has_end_game_req()) {
    mutable_end_game_req()->::blockus::EndGameReq::MergeFrom(from.end_game_req());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BlockusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.BlockusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockusRequest::CopyFrom(const BlockusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.BlockusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockusRequest::IsInitialized() const {
  return true;
}

void BlockusRequest::Swap(BlockusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockusRequest::InternalSwap(BlockusRequest* other) {
  using std::swap;
  swap(join_game_req_, other->join_game_req_);
  swap(start_game_req_, other->start_game_req_);
  swap(player_move_req_, other->player_move_req_);
  swap(player_move_sync_req_, other->player_move_sync_req_);
  swap(end_game_req_, other->end_game_req_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockusRequest::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockusRequest

// .blockus.BlockusRequest.RequestType type = 1;
void BlockusRequest::clear_type() {
  type_ = 0;
}
::blockus::BlockusRequest_RequestType BlockusRequest::type() const {
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.type)
  return static_cast< ::blockus::BlockusRequest_RequestType >(type_);
}
void BlockusRequest::set_type(::blockus::BlockusRequest_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:blockus.BlockusRequest.type)
}

// .blockus.JoinGameReq join_game_req = 2;
bool BlockusRequest::has_join_game_req() const {
  return this != internal_default_instance() && join_game_req_ != NULL;
}
void BlockusRequest::clear_join_game_req() {
  if (GetArenaNoVirtual() == NULL && join_game_req_ != NULL) delete join_game_req_;
  join_game_req_ = NULL;
}
const ::blockus::JoinGameReq& BlockusRequest::join_game_req() const {
  const ::blockus::JoinGameReq* p = join_game_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.join_game_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::JoinGameReq*>(
      &::blockus::_JoinGameReq_default_instance_);
}
::blockus::JoinGameReq* BlockusRequest::mutable_join_game_req() {
  
  if (join_game_req_ == NULL) {
    join_game_req_ = new ::blockus::JoinGameReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.join_game_req)
  return join_game_req_;
}
::blockus::JoinGameReq* BlockusRequest::release_join_game_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.join_game_req)
  
  ::blockus::JoinGameReq* temp = join_game_req_;
  join_game_req_ = NULL;
  return temp;
}
void BlockusRequest::set_allocated_join_game_req(::blockus::JoinGameReq* join_game_req) {
  delete join_game_req_;
  join_game_req_ = join_game_req;
  if (join_game_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.join_game_req)
}

// .blockus.StartGameReq start_game_req = 3;
bool BlockusRequest::has_start_game_req() const {
  return this != internal_default_instance() && start_game_req_ != NULL;
}
void BlockusRequest::clear_start_game_req() {
  if (GetArenaNoVirtual() == NULL && start_game_req_ != NULL) delete start_game_req_;
  start_game_req_ = NULL;
}
const ::blockus::StartGameReq& BlockusRequest::start_game_req() const {
  const ::blockus::StartGameReq* p = start_game_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.start_game_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::StartGameReq*>(
      &::blockus::_StartGameReq_default_instance_);
}
::blockus::StartGameReq* BlockusRequest::mutable_start_game_req() {
  
  if (start_game_req_ == NULL) {
    start_game_req_ = new ::blockus::StartGameReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.start_game_req)
  return start_game_req_;
}
::blockus::StartGameReq* BlockusRequest::release_start_game_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.start_game_req)
  
  ::blockus::StartGameReq* temp = start_game_req_;
  start_game_req_ = NULL;
  return temp;
}
void BlockusRequest::set_allocated_start_game_req(::blockus::StartGameReq* start_game_req) {
  delete start_game_req_;
  start_game_req_ = start_game_req;
  if (start_game_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.start_game_req)
}

// .blockus.PlayerMoveReq player_move_req = 4;
bool BlockusRequest::has_player_move_req() const {
  return this != internal_default_instance() && player_move_req_ != NULL;
}
void BlockusRequest::clear_player_move_req() {
  if (GetArenaNoVirtual() == NULL && player_move_req_ != NULL) delete player_move_req_;
  player_move_req_ = NULL;
}
const ::blockus::PlayerMoveReq& BlockusRequest::player_move_req() const {
  const ::blockus::PlayerMoveReq* p = player_move_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.player_move_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveReq*>(
      &::blockus::_PlayerMoveReq_default_instance_);
}
::blockus::PlayerMoveReq* BlockusRequest::mutable_player_move_req() {
  
  if (player_move_req_ == NULL) {
    player_move_req_ = new ::blockus::PlayerMoveReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.player_move_req)
  return player_move_req_;
}
::blockus::PlayerMoveReq* BlockusRequest::release_player_move_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.player_move_req)
  
  ::blockus::PlayerMoveReq* temp = player_move_req_;
  player_move_req_ = NULL;
  return temp;
}
void BlockusRequest::set_allocated_player_move_req(::blockus::PlayerMoveReq* player_move_req) {
  delete player_move_req_;
  player_move_req_ = player_move_req;
  if (player_move_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.player_move_req)
}

// .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
bool BlockusRequest::has_player_move_sync_req() const {
  return this != internal_default_instance() && player_move_sync_req_ != NULL;
}
void BlockusRequest::clear_player_move_sync_req() {
  if (GetArenaNoVirtual() == NULL && player_move_sync_req_ != NULL) delete player_move_sync_req_;
  player_move_sync_req_ = NULL;
}
const ::blockus::PlayerMoveSyncReq& BlockusRequest::player_move_sync_req() const {
  const ::blockus::PlayerMoveSyncReq* p = player_move_sync_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.player_move_sync_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveSyncReq*>(
      &::blockus::_PlayerMoveSyncReq_default_instance_);
}
::blockus::PlayerMoveSyncReq* BlockusRequest::mutable_player_move_sync_req() {
  
  if (player_move_sync_req_ == NULL) {
    player_move_sync_req_ = new ::blockus::PlayerMoveSyncReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.player_move_sync_req)
  return player_move_sync_req_;
}
::blockus::PlayerMoveSyncReq* BlockusRequest::release_player_move_sync_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.player_move_sync_req)
  
  ::blockus::PlayerMoveSyncReq* temp = player_move_sync_req_;
  player_move_sync_req_ = NULL;
  return temp;
}
void BlockusRequest::set_allocated_player_move_sync_req(::blockus::PlayerMoveSyncReq* player_move_sync_req) {
  delete player_move_sync_req_;
  player_move_sync_req_ = player_move_sync_req;
  if (player_move_sync_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.player_move_sync_req)
}

// .blockus.EndGameReq end_game_req = 6;
bool BlockusRequest::has_end_game_req() const {
  return this != internal_default_instance() && end_game_req_ != NULL;
}
void BlockusRequest::clear_end_game_req() {
  if (GetArenaNoVirtual() == NULL && end_game_req_ != NULL) delete end_game_req_;
  end_game_req_ = NULL;
}
const ::blockus::EndGameReq& BlockusRequest::end_game_req() const {
  const ::blockus::EndGameReq* p = end_game_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.end_game_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::EndGameReq*>(
      &::blockus::_EndGameReq_default_instance_);
}
::blockus::EndGameReq* BlockusRequest::mutable_end_game_req() {
  
  if (end_game_req_ == NULL) {
    end_game_req_ = new ::blockus::EndGameReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.end_game_req)
  return end_game_req_;
}
::blockus::EndGameReq* BlockusRequest::release_end_game_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.end_game_req)
  
  ::blockus::EndGameReq* temp = end_game_req_;
  end_game_req_ = NULL;
  return temp;
}
void BlockusRequest::set_allocated_end_game_req(::blockus::EndGameReq* end_game_req) {
  delete end_game_req_;
  end_game_req_ = end_game_req;
  if (end_game_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.end_game_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockusResponse::kTypeFieldNumber;
const int BlockusResponse::kJoinGameRespFieldNumber;
const int BlockusResponse::kStartGameRespFieldNumber;
const int BlockusResponse::kPlayerMoveRespFieldNumber;
const int BlockusResponse::kPlayerMoveSyncRespFieldNumber;
const int BlockusResponse::kEndGameRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockusResponse::BlockusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.BlockusResponse)
}
BlockusResponse::BlockusResponse(const BlockusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_join_game_resp()) {
    join_game_resp_ = new ::blockus::JoinGameResp(*from.join_game_resp_);
  } else {
    join_game_resp_ = NULL;
  }
  if (from.has_start_game_resp()) {
    start_game_resp_ = new ::blockus::StartGameResp(*from.start_game_resp_);
  } else {
    start_game_resp_ = NULL;
  }
  if (from.has_player_move_resp()) {
    player_move_resp_ = new ::blockus::PlayerMoveResp(*from.player_move_resp_);
  } else {
    player_move_resp_ = NULL;
  }
  if (from.has_player_move_sync_resp()) {
    player_move_sync_resp_ = new ::blockus::PlayerMoveSyncResp(*from.player_move_sync_resp_);
  } else {
    player_move_sync_resp_ = NULL;
  }
  if (from.has_end_game_resp()) {
    end_game_resp_ = new ::blockus::EndGameResp(*from.end_game_resp_);
  } else {
    end_game_resp_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:blockus.BlockusResponse)
}

void BlockusResponse::SharedCtor() {
  ::memset(&join_game_resp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&join_game_resp_)) + sizeof(type_));
  _cached_size_ = 0;
}

BlockusResponse::~BlockusResponse() {
  // @@protoc_insertion_point(destructor:blockus.BlockusResponse)
  SharedDtor();
}

void BlockusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete join_game_resp_;
  if (this != internal_default_instance()) delete start_game_resp_;
  if (this != internal_default_instance()) delete player_move_resp_;
  if (this != internal_default_instance()) delete player_move_sync_resp_;
  if (this != internal_default_instance()) delete end_game_resp_;
}

void BlockusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockusResponse::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockusResponse& BlockusResponse::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockusResponse* BlockusResponse::New(::google::protobuf::Arena* arena) const {
  BlockusResponse* n = new BlockusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.BlockusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && join_game_resp_ != NULL) {
    delete join_game_resp_;
  }
  join_game_resp_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_game_resp_ != NULL) {
    delete start_game_resp_;
  }
  start_game_resp_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_move_resp_ != NULL) {
    delete player_move_resp_;
  }
  player_move_resp_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_move_sync_resp_ != NULL) {
    delete player_move_sync_resp_;
  }
  player_move_sync_resp_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_game_resp_ != NULL) {
    delete end_game_resp_;
  }
  end_game_resp_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool BlockusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.BlockusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blockus.BlockusResponse.RequestType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::blockus::BlockusResponse_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.JoinGameResp join_game_resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_game_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.StartGameResp start_game_resp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_game_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.PlayerMoveResp player_move_resp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_move_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_move_sync_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.EndGameResp end_game_resp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_game_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.BlockusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.BlockusResponse)
  return false;
#undef DO_
}

void BlockusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.BlockusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.BlockusResponse.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .blockus.JoinGameResp join_game_resp = 2;
  if (this->has_join_game_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->join_game_resp_, output);
  }

  // .blockus.StartGameResp start_game_resp = 3;
  if (this->has_start_game_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_game_resp_, output);
  }

  // .blockus.PlayerMoveResp player_move_resp = 4;
  if (this->has_player_move_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->player_move_resp_, output);
  }

  // .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
  if (this->has_player_move_sync_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->player_move_sync_resp_, output);
  }

  // .blockus.EndGameResp end_game_resp = 6;
  if (this->has_end_game_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->end_game_resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.BlockusResponse)
}

::google::protobuf::uint8* BlockusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.BlockusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.BlockusResponse.RequestType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .blockus.JoinGameResp join_game_resp = 2;
  if (this->has_join_game_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->join_game_resp_, deterministic, target);
  }

  // .blockus.StartGameResp start_game_resp = 3;
  if (this->has_start_game_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->start_game_resp_, deterministic, target);
  }

  // .blockus.PlayerMoveResp player_move_resp = 4;
  if (this->has_player_move_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->player_move_resp_, deterministic, target);
  }

  // .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
  if (this->has_player_move_sync_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->player_move_sync_resp_, deterministic, target);
  }

  // .blockus.EndGameResp end_game_resp = 6;
  if (this->has_end_game_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->end_game_resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.BlockusResponse)
  return target;
}

size_t BlockusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.BlockusResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blockus.JoinGameResp join_game_resp = 2;
  if (this->has_join_game_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->join_game_resp_);
  }

  // .blockus.StartGameResp start_game_resp = 3;
  if (this->has_start_game_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_game_resp_);
  }

  // .blockus.PlayerMoveResp player_move_resp = 4;
  if (this->has_player_move_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_move_resp_);
  }

  // .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
  if (this->has_player_move_sync_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_move_sync_resp_);
  }

  // .blockus.EndGameResp end_game_resp = 6;
  if (this->has_end_game_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_game_resp_);
  }

  // .blockus.BlockusResponse.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.BlockusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.BlockusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.BlockusResponse)
    MergeFrom(*source);
  }
}

void BlockusResponse::MergeFrom(const BlockusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.BlockusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_join_game_resp()) {
    mutable_join_game_resp()->::blockus::JoinGameResp::MergeFrom(from.join_game_resp());
  }
  if (from.has_start_game_resp()) {
    mutable_start_game_resp()->::blockus::StartGameResp::MergeFrom(from.start_game_resp());
  }
  if (from.has_player_move_resp()) {
    mutable_player_move_resp()->::blockus::PlayerMoveResp::MergeFrom(from.player_move_resp());
  }
  if (from.has_player_move_sync_resp()) {
    mutable_player_move_sync_resp()->::blockus::PlayerMoveSyncResp::MergeFrom(from.player_move_sync_resp());
  }
  if (from.has_end_game_resp()) {
    mutable_end_game_resp()->::blockus::EndGameResp::MergeFrom(from.end_game_resp());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BlockusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.BlockusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockusResponse::CopyFrom(const BlockusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.BlockusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockusResponse::IsInitialized() const {
  return true;
}

void BlockusResponse::Swap(BlockusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockusResponse::InternalSwap(BlockusResponse* other) {
  using std::swap;
  swap(join_game_resp_, other->join_game_resp_);
  swap(start_game_resp_, other->start_game_resp_);
  swap(player_move_resp_, other->player_move_resp_);
  swap(player_move_sync_resp_, other->player_move_sync_resp_);
  swap(end_game_resp_, other->end_game_resp_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockusResponse::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockusResponse

// .blockus.BlockusResponse.RequestType type = 1;
void BlockusResponse::clear_type() {
  type_ = 0;
}
::blockus::BlockusResponse_RequestType BlockusResponse::type() const {
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.type)
  return static_cast< ::blockus::BlockusResponse_RequestType >(type_);
}
void BlockusResponse::set_type(::blockus::BlockusResponse_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:blockus.BlockusResponse.type)
}

// .blockus.JoinGameResp join_game_resp = 2;
bool BlockusResponse::has_join_game_resp() const {
  return this != internal_default_instance() && join_game_resp_ != NULL;
}
void BlockusResponse::clear_join_game_resp() {
  if (GetArenaNoVirtual() == NULL && join_game_resp_ != NULL) delete join_game_resp_;
  join_game_resp_ = NULL;
}
const ::blockus::JoinGameResp& BlockusResponse::join_game_resp() const {
  const ::blockus::JoinGameResp* p = join_game_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.join_game_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::JoinGameResp*>(
      &::blockus::_JoinGameResp_default_instance_);
}
::blockus::JoinGameResp* BlockusResponse::mutable_join_game_resp() {
  
  if (join_game_resp_ == NULL) {
    join_game_resp_ = new ::blockus::JoinGameResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.join_game_resp)
  return join_game_resp_;
}
::blockus::JoinGameResp* BlockusResponse::release_join_game_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.join_game_resp)
  
  ::blockus::JoinGameResp* temp = join_game_resp_;
  join_game_resp_ = NULL;
  return temp;
}
void BlockusResponse::set_allocated_join_game_resp(::blockus::JoinGameResp* join_game_resp) {
  delete join_game_resp_;
  join_game_resp_ = join_game_resp;
  if (join_game_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.join_game_resp)
}

// .blockus.StartGameResp start_game_resp = 3;
bool BlockusResponse::has_start_game_resp() const {
  return this != internal_default_instance() && start_game_resp_ != NULL;
}
void BlockusResponse::clear_start_game_resp() {
  if (GetArenaNoVirtual() == NULL && start_game_resp_ != NULL) delete start_game_resp_;
  start_game_resp_ = NULL;
}
const ::blockus::StartGameResp& BlockusResponse::start_game_resp() const {
  const ::blockus::StartGameResp* p = start_game_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.start_game_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::StartGameResp*>(
      &::blockus::_StartGameResp_default_instance_);
}
::blockus::StartGameResp* BlockusResponse::mutable_start_game_resp() {
  
  if (start_game_resp_ == NULL) {
    start_game_resp_ = new ::blockus::StartGameResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.start_game_resp)
  return start_game_resp_;
}
::blockus::StartGameResp* BlockusResponse::release_start_game_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.start_game_resp)
  
  ::blockus::StartGameResp* temp = start_game_resp_;
  start_game_resp_ = NULL;
  return temp;
}
void BlockusResponse::set_allocated_start_game_resp(::blockus::StartGameResp* start_game_resp) {
  delete start_game_resp_;
  start_game_resp_ = start_game_resp;
  if (start_game_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.start_game_resp)
}

// .blockus.PlayerMoveResp player_move_resp = 4;
bool BlockusResponse::has_player_move_resp() const {
  return this != internal_default_instance() && player_move_resp_ != NULL;
}
void BlockusResponse::clear_player_move_resp() {
  if (GetArenaNoVirtual() == NULL && player_move_resp_ != NULL) delete player_move_resp_;
  player_move_resp_ = NULL;
}
const ::blockus::PlayerMoveResp& BlockusResponse::player_move_resp() const {
  const ::blockus::PlayerMoveResp* p = player_move_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.player_move_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveResp*>(
      &::blockus::_PlayerMoveResp_default_instance_);
}
::blockus::PlayerMoveResp* BlockusResponse::mutable_player_move_resp() {
  
  if (player_move_resp_ == NULL) {
    player_move_resp_ = new ::blockus::PlayerMoveResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.player_move_resp)
  return player_move_resp_;
}
::blockus::PlayerMoveResp* BlockusResponse::release_player_move_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.player_move_resp)
  
  ::blockus::PlayerMoveResp* temp = player_move_resp_;
  player_move_resp_ = NULL;
  return temp;
}
void BlockusResponse::set_allocated_player_move_resp(::blockus::PlayerMoveResp* player_move_resp) {
  delete player_move_resp_;
  player_move_resp_ = player_move_resp;
  if (player_move_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.player_move_resp)
}

// .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
bool BlockusResponse::has_player_move_sync_resp() const {
  return this != internal_default_instance() && player_move_sync_resp_ != NULL;
}
void BlockusResponse::clear_player_move_sync_resp() {
  if (GetArenaNoVirtual() == NULL && player_move_sync_resp_ != NULL) delete player_move_sync_resp_;
  player_move_sync_resp_ = NULL;
}
const ::blockus::PlayerMoveSyncResp& BlockusResponse::player_move_sync_resp() const {
  const ::blockus::PlayerMoveSyncResp* p = player_move_sync_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.player_move_sync_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveSyncResp*>(
      &::blockus::_PlayerMoveSyncResp_default_instance_);
}
::blockus::PlayerMoveSyncResp* BlockusResponse::mutable_player_move_sync_resp() {
  
  if (player_move_sync_resp_ == NULL) {
    player_move_sync_resp_ = new ::blockus::PlayerMoveSyncResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.player_move_sync_resp)
  return player_move_sync_resp_;
}
::blockus::PlayerMoveSyncResp* BlockusResponse::release_player_move_sync_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.player_move_sync_resp)
  
  ::blockus::PlayerMoveSyncResp* temp = player_move_sync_resp_;
  player_move_sync_resp_ = NULL;
  return temp;
}
void BlockusResponse::set_allocated_player_move_sync_resp(::blockus::PlayerMoveSyncResp* player_move_sync_resp) {
  delete player_move_sync_resp_;
  player_move_sync_resp_ = player_move_sync_resp;
  if (player_move_sync_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.player_move_sync_resp)
}

// .blockus.EndGameResp end_game_resp = 6;
bool BlockusResponse::has_end_game_resp() const {
  return this != internal_default_instance() && end_game_resp_ != NULL;
}
void BlockusResponse::clear_end_game_resp() {
  if (GetArenaNoVirtual() == NULL && end_game_resp_ != NULL) delete end_game_resp_;
  end_game_resp_ = NULL;
}
const ::blockus::EndGameResp& BlockusResponse::end_game_resp() const {
  const ::blockus::EndGameResp* p = end_game_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.end_game_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::EndGameResp*>(
      &::blockus::_EndGameResp_default_instance_);
}
::blockus::EndGameResp* BlockusResponse::mutable_end_game_resp() {
  
  if (end_game_resp_ == NULL) {
    end_game_resp_ = new ::blockus::EndGameResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.end_game_resp)
  return end_game_resp_;
}
::blockus::EndGameResp* BlockusResponse::release_end_game_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.end_game_resp)
  
  ::blockus::EndGameResp* temp = end_game_resp_;
  end_game_resp_ = NULL;
  return temp;
}
void BlockusResponse::set_allocated_end_game_resp(::blockus::EndGameResp* end_game_resp) {
  delete end_game_resp_;
  end_game_resp_ = end_game_resp;
  if (end_game_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.end_game_resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockusProcess::kTypeFieldNumber;
const int BlockusProcess::kRequestFieldNumber;
const int BlockusProcess::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockusProcess::BlockusProcess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_blokus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:blockus.BlockusProcess)
}
BlockusProcess::BlockusProcess(const BlockusProcess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::blockus::BlockusRequest(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::blockus::BlockusResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:blockus.BlockusProcess)
}

void BlockusProcess::SharedCtor() {
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&request_)) + sizeof(type_));
  _cached_size_ = 0;
}

BlockusProcess::~BlockusProcess() {
  // @@protoc_insertion_point(destructor:blockus.BlockusProcess)
  SharedDtor();
}

void BlockusProcess::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void BlockusProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockusProcess::descriptor() {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockusProcess& BlockusProcess::default_instance() {
  protobuf_blokus_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockusProcess* BlockusProcess::New(::google::protobuf::Arena* arena) const {
  BlockusProcess* n = new BlockusProcess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockusProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:blockus.BlockusProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool BlockusProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blockus.BlockusProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .blockus.BlockusProcess.MsgType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::blockus::BlockusProcess_MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.BlockusRequest request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .blockus.BlockusResponse response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blockus.BlockusProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blockus.BlockusProcess)
  return false;
#undef DO_
}

void BlockusProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blockus.BlockusProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.BlockusProcess.MsgType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .blockus.BlockusRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // .blockus.BlockusResponse response = 3;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->response_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:blockus.BlockusProcess)
}

::google::protobuf::uint8* BlockusProcess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:blockus.BlockusProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockus.BlockusProcess.MsgType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .blockus.BlockusRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, deterministic, target);
  }

  // .blockus.BlockusResponse response = 3;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->response_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockus.BlockusProcess)
  return target;
}

size_t BlockusProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockus.BlockusProcess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .blockus.BlockusRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // .blockus.BlockusResponse response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .blockus.BlockusProcess.MsgType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockusProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:blockus.BlockusProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockusProcess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockusProcess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:blockus.BlockusProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:blockus.BlockusProcess)
    MergeFrom(*source);
  }
}

void BlockusProcess::MergeFrom(const BlockusProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockus.BlockusProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    mutable_request()->::blockus::BlockusRequest::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::blockus::BlockusResponse::MergeFrom(from.response());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BlockusProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:blockus.BlockusProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockusProcess::CopyFrom(const BlockusProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockus.BlockusProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockusProcess::IsInitialized() const {
  return true;
}

void BlockusProcess::Swap(BlockusProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockusProcess::InternalSwap(BlockusProcess* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(response_, other->response_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockusProcess::GetMetadata() const {
  protobuf_blokus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_blokus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockusProcess

// .blockus.BlockusProcess.MsgType type = 1;
void BlockusProcess::clear_type() {
  type_ = 0;
}
::blockus::BlockusProcess_MsgType BlockusProcess::type() const {
  // @@protoc_insertion_point(field_get:blockus.BlockusProcess.type)
  return static_cast< ::blockus::BlockusProcess_MsgType >(type_);
}
void BlockusProcess::set_type(::blockus::BlockusProcess_MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:blockus.BlockusProcess.type)
}

// .blockus.BlockusRequest request = 2;
bool BlockusProcess::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void BlockusProcess::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::blockus::BlockusRequest& BlockusProcess::request() const {
  const ::blockus::BlockusRequest* p = request_;
  // @@protoc_insertion_point(field_get:blockus.BlockusProcess.request)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::BlockusRequest*>(
      &::blockus::_BlockusRequest_default_instance_);
}
::blockus::BlockusRequest* BlockusProcess::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::blockus::BlockusRequest;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusProcess.request)
  return request_;
}
::blockus::BlockusRequest* BlockusProcess::release_request() {
  // @@protoc_insertion_point(field_release:blockus.BlockusProcess.request)
  
  ::blockus::BlockusRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void BlockusProcess::set_allocated_request(::blockus::BlockusRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusProcess.request)
}

// .blockus.BlockusResponse response = 3;
bool BlockusProcess::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void BlockusProcess::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::blockus::BlockusResponse& BlockusProcess::response() const {
  const ::blockus::BlockusResponse* p = response_;
  // @@protoc_insertion_point(field_get:blockus.BlockusProcess.response)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::BlockusResponse*>(
      &::blockus::_BlockusResponse_default_instance_);
}
::blockus::BlockusResponse* BlockusProcess::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::blockus::BlockusResponse;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusProcess.response)
  return response_;
}
::blockus::BlockusResponse* BlockusProcess::release_response() {
  // @@protoc_insertion_point(field_release:blockus.BlockusProcess.response)
  
  ::blockus::BlockusResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void BlockusProcess::set_allocated_response(::blockus::BlockusResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusProcess.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blockus

// @@protoc_insertion_point(global_scope)
