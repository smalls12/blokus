// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blokus.proto

#ifndef PROTOBUF_blokus_2eproto__INCLUDED
#define PROTOBUF_blokus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace blockus {
class BlockusProcess;
class BlockusProcessDefaultTypeInternal;
extern BlockusProcessDefaultTypeInternal _BlockusProcess_default_instance_;
class BlockusRequest;
class BlockusRequestDefaultTypeInternal;
extern BlockusRequestDefaultTypeInternal _BlockusRequest_default_instance_;
class BlockusResponse;
class BlockusResponseDefaultTypeInternal;
extern BlockusResponseDefaultTypeInternal _BlockusResponse_default_instance_;
class EndGameReq;
class EndGameReqDefaultTypeInternal;
extern EndGameReqDefaultTypeInternal _EndGameReq_default_instance_;
class EndGameResp;
class EndGameRespDefaultTypeInternal;
extern EndGameRespDefaultTypeInternal _EndGameResp_default_instance_;
class JoinGameReq;
class JoinGameReqDefaultTypeInternal;
extern JoinGameReqDefaultTypeInternal _JoinGameReq_default_instance_;
class JoinGameResp;
class JoinGameRespDefaultTypeInternal;
extern JoinGameRespDefaultTypeInternal _JoinGameResp_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerMoveReq;
class PlayerMoveReqDefaultTypeInternal;
extern PlayerMoveReqDefaultTypeInternal _PlayerMoveReq_default_instance_;
class PlayerMoveResp;
class PlayerMoveRespDefaultTypeInternal;
extern PlayerMoveRespDefaultTypeInternal _PlayerMoveResp_default_instance_;
class PlayerMoveSyncReq;
class PlayerMoveSyncReqDefaultTypeInternal;
extern PlayerMoveSyncReqDefaultTypeInternal _PlayerMoveSyncReq_default_instance_;
class PlayerMoveSyncResp;
class PlayerMoveSyncRespDefaultTypeInternal;
extern PlayerMoveSyncRespDefaultTypeInternal _PlayerMoveSyncResp_default_instance_;
class StartGameReq;
class StartGameReqDefaultTypeInternal;
extern StartGameReqDefaultTypeInternal _StartGameReq_default_instance_;
class StartGameResp;
class StartGameRespDefaultTypeInternal;
extern StartGameRespDefaultTypeInternal _StartGameResp_default_instance_;
}  // namespace blockus

namespace blockus {

namespace protobuf_blokus_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_blokus_2eproto

enum BlockusRequest_RequestType {
  BlockusRequest_RequestType_JOIN_GAME = 0,
  BlockusRequest_RequestType_START_GAME = 1,
  BlockusRequest_RequestType_PLAYER_MOVE = 2,
  BlockusRequest_RequestType_PLAYER_MOVE_SYNC = 3,
  BlockusRequest_RequestType_END_GAME = 4,
  BlockusRequest_RequestType_BlockusRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BlockusRequest_RequestType_BlockusRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BlockusRequest_RequestType_IsValid(int value);
const BlockusRequest_RequestType BlockusRequest_RequestType_RequestType_MIN = BlockusRequest_RequestType_JOIN_GAME;
const BlockusRequest_RequestType BlockusRequest_RequestType_RequestType_MAX = BlockusRequest_RequestType_END_GAME;
const int BlockusRequest_RequestType_RequestType_ARRAYSIZE = BlockusRequest_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockusRequest_RequestType_descriptor();
inline const ::std::string& BlockusRequest_RequestType_Name(BlockusRequest_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockusRequest_RequestType_descriptor(), value);
}
inline bool BlockusRequest_RequestType_Parse(
    const ::std::string& name, BlockusRequest_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockusRequest_RequestType>(
    BlockusRequest_RequestType_descriptor(), name, value);
}
enum BlockusResponse_RequestType {
  BlockusResponse_RequestType_JOIN_GAME = 0,
  BlockusResponse_RequestType_START_GAME = 1,
  BlockusResponse_RequestType_PLAYER_MOVE = 2,
  BlockusResponse_RequestType_PLAYER_MOVE_SYNC = 3,
  BlockusResponse_RequestType_END_GAME = 4,
  BlockusResponse_RequestType_BlockusResponse_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BlockusResponse_RequestType_BlockusResponse_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BlockusResponse_RequestType_IsValid(int value);
const BlockusResponse_RequestType BlockusResponse_RequestType_RequestType_MIN = BlockusResponse_RequestType_JOIN_GAME;
const BlockusResponse_RequestType BlockusResponse_RequestType_RequestType_MAX = BlockusResponse_RequestType_END_GAME;
const int BlockusResponse_RequestType_RequestType_ARRAYSIZE = BlockusResponse_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockusResponse_RequestType_descriptor();
inline const ::std::string& BlockusResponse_RequestType_Name(BlockusResponse_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockusResponse_RequestType_descriptor(), value);
}
inline bool BlockusResponse_RequestType_Parse(
    const ::std::string& name, BlockusResponse_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockusResponse_RequestType>(
    BlockusResponse_RequestType_descriptor(), name, value);
}
enum BlockusProcess_MsgType {
  BlockusProcess_MsgType_REQUEST = 0,
  BlockusProcess_MsgType_RESPONSE = 1,
  BlockusProcess_MsgType_BlockusProcess_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BlockusProcess_MsgType_BlockusProcess_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BlockusProcess_MsgType_IsValid(int value);
const BlockusProcess_MsgType BlockusProcess_MsgType_MsgType_MIN = BlockusProcess_MsgType_REQUEST;
const BlockusProcess_MsgType BlockusProcess_MsgType_MsgType_MAX = BlockusProcess_MsgType_RESPONSE;
const int BlockusProcess_MsgType_MsgType_ARRAYSIZE = BlockusProcess_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockusProcess_MsgType_descriptor();
inline const ::std::string& BlockusProcess_MsgType_Name(BlockusProcess_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockusProcess_MsgType_descriptor(), value);
}
inline bool BlockusProcess_MsgType_Parse(
    const ::std::string& name, BlockusProcess_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockusProcess_MsgType>(
    BlockusProcess_MsgType_descriptor(), name, value);
}
enum PlayerColor {
  BLUE = 0,
  RED = 1,
  GREEN = 2,
  YELLOW = 3,
  PlayerColor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerColor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerColor_IsValid(int value);
const PlayerColor PlayerColor_MIN = BLUE;
const PlayerColor PlayerColor_MAX = YELLOW;
const int PlayerColor_ARRAYSIZE = PlayerColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerColor_descriptor();
inline const ::std::string& PlayerColor_Name(PlayerColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerColor_descriptor(), value);
}
inline bool PlayerColor_Parse(
    const ::std::string& name, PlayerColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerColor>(
    PlayerColor_descriptor(), name, value);
}
enum Piece {
  I5 = 0,
  N = 1,
  V5 = 2,
  T5 = 3,
  U = 4,
  L5 = 5,
  Y = 6,
  Z5 = 7,
  W = 8,
  P = 9,
  X = 10,
  Z4 = 11,
  I4 = 12,
  L4 = 13,
  O = 14,
  T4 = 15,
  I3 = 16,
  V3 = 17,
  I2 = 18,
  I1 = 19,
  Piece_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Piece_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Piece_IsValid(int value);
const Piece Piece_MIN = I5;
const Piece Piece_MAX = I1;
const int Piece_ARRAYSIZE = Piece_MAX + 1;

const ::google::protobuf::EnumDescriptor* Piece_descriptor();
inline const ::std::string& Piece_Name(Piece value) {
  return ::google::protobuf::internal::NameOfEnum(
    Piece_descriptor(), value);
}
inline bool Piece_Parse(
    const ::std::string& name, Piece* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Piece>(
    Piece_descriptor(), name, value);
}
// ===================================================================

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Player* other);
  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const PROTOBUF_FINAL { return New(NULL); }

  Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .blockus.PlayerColor color = 1;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::blockus::PlayerColor color() const;
  void set_color(::blockus::PlayerColor value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blockus.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  int color_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.JoinGameReq) */ {
 public:
  JoinGameReq();
  virtual ~JoinGameReq();

  JoinGameReq(const JoinGameReq& from);

  inline JoinGameReq& operator=(const JoinGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinGameReq(JoinGameReq&& from) noexcept
    : JoinGameReq() {
    *this = ::std::move(from);
  }

  inline JoinGameReq& operator=(JoinGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGameReq& default_instance();

  static inline const JoinGameReq* internal_default_instance() {
    return reinterpret_cast<const JoinGameReq*>(
               &_JoinGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(JoinGameReq* other);
  friend void swap(JoinGameReq& a, JoinGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinGameReq& from);
  void MergeFrom(const JoinGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:blockus.JoinGameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.JoinGameResp) */ {
 public:
  JoinGameResp();
  virtual ~JoinGameResp();

  JoinGameResp(const JoinGameResp& from);

  inline JoinGameResp& operator=(const JoinGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinGameResp(JoinGameResp&& from) noexcept
    : JoinGameResp() {
    *this = ::std::move(from);
  }

  inline JoinGameResp& operator=(JoinGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGameResp& default_instance();

  static inline const JoinGameResp* internal_default_instance() {
    return reinterpret_cast<const JoinGameResp*>(
               &_JoinGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(JoinGameResp* other);
  friend void swap(JoinGameResp& a, JoinGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinGameResp& from);
  void MergeFrom(const JoinGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .blockus.Player player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  const ::blockus::Player& player() const;
  ::blockus::Player* mutable_player();
  ::blockus::Player* release_player();
  void set_allocated_player(::blockus::Player* player);

  // @@protoc_insertion_point(class_scope:blockus.JoinGameResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blockus::Player* player_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.StartGameReq) */ {
 public:
  StartGameReq();
  virtual ~StartGameReq();

  StartGameReq(const StartGameReq& from);

  inline StartGameReq& operator=(const StartGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartGameReq(StartGameReq&& from) noexcept
    : StartGameReq() {
    *this = ::std::move(from);
  }

  inline StartGameReq& operator=(StartGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartGameReq& default_instance();

  static inline const StartGameReq* internal_default_instance() {
    return reinterpret_cast<const StartGameReq*>(
               &_StartGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StartGameReq* other);
  friend void swap(StartGameReq& a, StartGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  StartGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartGameReq& from);
  void MergeFrom(const StartGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blockus.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::blockus::Player& players(int index) const;
  ::blockus::Player* mutable_players(int index);
  ::blockus::Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::blockus::Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::blockus::Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:blockus.StartGameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::blockus::Player > players_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.StartGameResp) */ {
 public:
  StartGameResp();
  virtual ~StartGameResp();

  StartGameResp(const StartGameResp& from);

  inline StartGameResp& operator=(const StartGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartGameResp(StartGameResp&& from) noexcept
    : StartGameResp() {
    *this = ::std::move(from);
  }

  inline StartGameResp& operator=(StartGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartGameResp& default_instance();

  static inline const StartGameResp* internal_default_instance() {
    return reinterpret_cast<const StartGameResp*>(
               &_StartGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StartGameResp* other);
  friend void swap(StartGameResp& a, StartGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  StartGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartGameResp& from);
  void MergeFrom(const StartGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blockus.StartGameResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x_position = 1;
  void clear_x_position();
  static const int kXPositionFieldNumber = 1;
  ::google::protobuf::uint32 x_position() const;
  void set_x_position(::google::protobuf::uint32 value);

  // uint32 y_position = 2;
  void clear_y_position();
  static const int kYPositionFieldNumber = 2;
  ::google::protobuf::uint32 y_position() const;
  void set_y_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blockus.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_position_;
  ::google::protobuf::uint32 y_position_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerMoveReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.PlayerMoveReq) */ {
 public:
  PlayerMoveReq();
  virtual ~PlayerMoveReq();

  PlayerMoveReq(const PlayerMoveReq& from);

  inline PlayerMoveReq& operator=(const PlayerMoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoveReq(PlayerMoveReq&& from) noexcept
    : PlayerMoveReq() {
    *this = ::std::move(from);
  }

  inline PlayerMoveReq& operator=(PlayerMoveReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveReq& default_instance();

  static inline const PlayerMoveReq* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveReq*>(
               &_PlayerMoveReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PlayerMoveReq* other);
  friend void swap(PlayerMoveReq& a, PlayerMoveReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMoveReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMoveReq& from);
  void MergeFrom(const PlayerMoveReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMoveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blockus.PlayerMoveReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerMoveResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.PlayerMoveResp) */ {
 public:
  PlayerMoveResp();
  virtual ~PlayerMoveResp();

  PlayerMoveResp(const PlayerMoveResp& from);

  inline PlayerMoveResp& operator=(const PlayerMoveResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoveResp(PlayerMoveResp&& from) noexcept
    : PlayerMoveResp() {
    *this = ::std::move(from);
  }

  inline PlayerMoveResp& operator=(PlayerMoveResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveResp& default_instance();

  static inline const PlayerMoveResp* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveResp*>(
               &_PlayerMoveResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PlayerMoveResp* other);
  friend void swap(PlayerMoveResp& a, PlayerMoveResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveResp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMoveResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMoveResp& from);
  void MergeFrom(const PlayerMoveResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMoveResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .blockus.Location location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::blockus::Location& location() const;
  ::blockus::Location* mutable_location();
  ::blockus::Location* release_location();
  void set_allocated_location(::blockus::Location* location);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .blockus.Piece piece = 2;
  void clear_piece();
  static const int kPieceFieldNumber = 2;
  ::blockus::Piece piece() const;
  void set_piece(::blockus::Piece value);

  // @@protoc_insertion_point(class_scope:blockus.PlayerMoveResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blockus::Location* location_;
  ::google::protobuf::uint32 id_;
  int piece_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerMoveSyncReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.PlayerMoveSyncReq) */ {
 public:
  PlayerMoveSyncReq();
  virtual ~PlayerMoveSyncReq();

  PlayerMoveSyncReq(const PlayerMoveSyncReq& from);

  inline PlayerMoveSyncReq& operator=(const PlayerMoveSyncReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoveSyncReq(PlayerMoveSyncReq&& from) noexcept
    : PlayerMoveSyncReq() {
    *this = ::std::move(from);
  }

  inline PlayerMoveSyncReq& operator=(PlayerMoveSyncReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveSyncReq& default_instance();

  static inline const PlayerMoveSyncReq* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveSyncReq*>(
               &_PlayerMoveSyncReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PlayerMoveSyncReq* other);
  friend void swap(PlayerMoveSyncReq& a, PlayerMoveSyncReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveSyncReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMoveSyncReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMoveSyncReq& from);
  void MergeFrom(const PlayerMoveSyncReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMoveSyncReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .blockus.Location location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::blockus::Location& location() const;
  ::blockus::Location* mutable_location();
  ::blockus::Location* release_location();
  void set_allocated_location(::blockus::Location* location);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .blockus.Piece piece = 2;
  void clear_piece();
  static const int kPieceFieldNumber = 2;
  ::blockus::Piece piece() const;
  void set_piece(::blockus::Piece value);

  // @@protoc_insertion_point(class_scope:blockus.PlayerMoveSyncReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blockus::Location* location_;
  ::google::protobuf::uint32 id_;
  int piece_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerMoveSyncResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.PlayerMoveSyncResp) */ {
 public:
  PlayerMoveSyncResp();
  virtual ~PlayerMoveSyncResp();

  PlayerMoveSyncResp(const PlayerMoveSyncResp& from);

  inline PlayerMoveSyncResp& operator=(const PlayerMoveSyncResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoveSyncResp(PlayerMoveSyncResp&& from) noexcept
    : PlayerMoveSyncResp() {
    *this = ::std::move(from);
  }

  inline PlayerMoveSyncResp& operator=(PlayerMoveSyncResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveSyncResp& default_instance();

  static inline const PlayerMoveSyncResp* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveSyncResp*>(
               &_PlayerMoveSyncResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PlayerMoveSyncResp* other);
  friend void swap(PlayerMoveSyncResp& a, PlayerMoveSyncResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveSyncResp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMoveSyncResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMoveSyncResp& from);
  void MergeFrom(const PlayerMoveSyncResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMoveSyncResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blockus.PlayerMoveSyncResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.EndGameReq) */ {
 public:
  EndGameReq();
  virtual ~EndGameReq();

  EndGameReq(const EndGameReq& from);

  inline EndGameReq& operator=(const EndGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndGameReq(EndGameReq&& from) noexcept
    : EndGameReq() {
    *this = ::std::move(from);
  }

  inline EndGameReq& operator=(EndGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndGameReq& default_instance();

  static inline const EndGameReq* internal_default_instance() {
    return reinterpret_cast<const EndGameReq*>(
               &_EndGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(EndGameReq* other);
  friend void swap(EndGameReq& a, EndGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EndGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndGameReq& from);
  void MergeFrom(const EndGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blockus.EndGameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.EndGameResp) */ {
 public:
  EndGameResp();
  virtual ~EndGameResp();

  EndGameResp(const EndGameResp& from);

  inline EndGameResp& operator=(const EndGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndGameResp(EndGameResp&& from) noexcept
    : EndGameResp() {
    *this = ::std::move(from);
  }

  inline EndGameResp& operator=(EndGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndGameResp& default_instance();

  static inline const EndGameResp* internal_default_instance() {
    return reinterpret_cast<const EndGameResp*>(
               &_EndGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(EndGameResp* other);
  friend void swap(EndGameResp& a, EndGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EndGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndGameResp& from);
  void MergeFrom(const EndGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blockus.EndGameResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.BlockusRequest) */ {
 public:
  BlockusRequest();
  virtual ~BlockusRequest();

  BlockusRequest(const BlockusRequest& from);

  inline BlockusRequest& operator=(const BlockusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockusRequest(BlockusRequest&& from) noexcept
    : BlockusRequest() {
    *this = ::std::move(from);
  }

  inline BlockusRequest& operator=(BlockusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockusRequest& default_instance();

  static inline const BlockusRequest* internal_default_instance() {
    return reinterpret_cast<const BlockusRequest*>(
               &_BlockusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(BlockusRequest* other);
  friend void swap(BlockusRequest& a, BlockusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockusRequest& from);
  void MergeFrom(const BlockusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BlockusRequest_RequestType RequestType;
  static const RequestType JOIN_GAME =
    BlockusRequest_RequestType_JOIN_GAME;
  static const RequestType START_GAME =
    BlockusRequest_RequestType_START_GAME;
  static const RequestType PLAYER_MOVE =
    BlockusRequest_RequestType_PLAYER_MOVE;
  static const RequestType PLAYER_MOVE_SYNC =
    BlockusRequest_RequestType_PLAYER_MOVE_SYNC;
  static const RequestType END_GAME =
    BlockusRequest_RequestType_END_GAME;
  static inline bool RequestType_IsValid(int value) {
    return BlockusRequest_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    BlockusRequest_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    BlockusRequest_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    BlockusRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return BlockusRequest_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return BlockusRequest_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return BlockusRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .blockus.JoinGameReq join_game_req = 2;
  bool has_join_game_req() const;
  void clear_join_game_req();
  static const int kJoinGameReqFieldNumber = 2;
  const ::blockus::JoinGameReq& join_game_req() const;
  ::blockus::JoinGameReq* mutable_join_game_req();
  ::blockus::JoinGameReq* release_join_game_req();
  void set_allocated_join_game_req(::blockus::JoinGameReq* join_game_req);

  // .blockus.StartGameReq start_game_req = 3;
  bool has_start_game_req() const;
  void clear_start_game_req();
  static const int kStartGameReqFieldNumber = 3;
  const ::blockus::StartGameReq& start_game_req() const;
  ::blockus::StartGameReq* mutable_start_game_req();
  ::blockus::StartGameReq* release_start_game_req();
  void set_allocated_start_game_req(::blockus::StartGameReq* start_game_req);

  // .blockus.PlayerMoveReq player_move_req = 4;
  bool has_player_move_req() const;
  void clear_player_move_req();
  static const int kPlayerMoveReqFieldNumber = 4;
  const ::blockus::PlayerMoveReq& player_move_req() const;
  ::blockus::PlayerMoveReq* mutable_player_move_req();
  ::blockus::PlayerMoveReq* release_player_move_req();
  void set_allocated_player_move_req(::blockus::PlayerMoveReq* player_move_req);

  // .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
  bool has_player_move_sync_req() const;
  void clear_player_move_sync_req();
  static const int kPlayerMoveSyncReqFieldNumber = 5;
  const ::blockus::PlayerMoveSyncReq& player_move_sync_req() const;
  ::blockus::PlayerMoveSyncReq* mutable_player_move_sync_req();
  ::blockus::PlayerMoveSyncReq* release_player_move_sync_req();
  void set_allocated_player_move_sync_req(::blockus::PlayerMoveSyncReq* player_move_sync_req);

  // .blockus.EndGameReq end_game_req = 6;
  bool has_end_game_req() const;
  void clear_end_game_req();
  static const int kEndGameReqFieldNumber = 6;
  const ::blockus::EndGameReq& end_game_req() const;
  ::blockus::EndGameReq* mutable_end_game_req();
  ::blockus::EndGameReq* release_end_game_req();
  void set_allocated_end_game_req(::blockus::EndGameReq* end_game_req);

  // .blockus.BlockusRequest.RequestType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::blockus::BlockusRequest_RequestType type() const;
  void set_type(::blockus::BlockusRequest_RequestType value);

  // @@protoc_insertion_point(class_scope:blockus.BlockusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blockus::JoinGameReq* join_game_req_;
  ::blockus::StartGameReq* start_game_req_;
  ::blockus::PlayerMoveReq* player_move_req_;
  ::blockus::PlayerMoveSyncReq* player_move_sync_req_;
  ::blockus::EndGameReq* end_game_req_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.BlockusResponse) */ {
 public:
  BlockusResponse();
  virtual ~BlockusResponse();

  BlockusResponse(const BlockusResponse& from);

  inline BlockusResponse& operator=(const BlockusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockusResponse(BlockusResponse&& from) noexcept
    : BlockusResponse() {
    *this = ::std::move(from);
  }

  inline BlockusResponse& operator=(BlockusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockusResponse& default_instance();

  static inline const BlockusResponse* internal_default_instance() {
    return reinterpret_cast<const BlockusResponse*>(
               &_BlockusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(BlockusResponse* other);
  friend void swap(BlockusResponse& a, BlockusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockusResponse& from);
  void MergeFrom(const BlockusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BlockusResponse_RequestType RequestType;
  static const RequestType JOIN_GAME =
    BlockusResponse_RequestType_JOIN_GAME;
  static const RequestType START_GAME =
    BlockusResponse_RequestType_START_GAME;
  static const RequestType PLAYER_MOVE =
    BlockusResponse_RequestType_PLAYER_MOVE;
  static const RequestType PLAYER_MOVE_SYNC =
    BlockusResponse_RequestType_PLAYER_MOVE_SYNC;
  static const RequestType END_GAME =
    BlockusResponse_RequestType_END_GAME;
  static inline bool RequestType_IsValid(int value) {
    return BlockusResponse_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    BlockusResponse_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    BlockusResponse_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    BlockusResponse_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return BlockusResponse_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return BlockusResponse_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return BlockusResponse_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .blockus.JoinGameResp join_game_resp = 2;
  bool has_join_game_resp() const;
  void clear_join_game_resp();
  static const int kJoinGameRespFieldNumber = 2;
  const ::blockus::JoinGameResp& join_game_resp() const;
  ::blockus::JoinGameResp* mutable_join_game_resp();
  ::blockus::JoinGameResp* release_join_game_resp();
  void set_allocated_join_game_resp(::blockus::JoinGameResp* join_game_resp);

  // .blockus.StartGameResp start_game_resp = 3;
  bool has_start_game_resp() const;
  void clear_start_game_resp();
  static const int kStartGameRespFieldNumber = 3;
  const ::blockus::StartGameResp& start_game_resp() const;
  ::blockus::StartGameResp* mutable_start_game_resp();
  ::blockus::StartGameResp* release_start_game_resp();
  void set_allocated_start_game_resp(::blockus::StartGameResp* start_game_resp);

  // .blockus.PlayerMoveResp player_move_resp = 4;
  bool has_player_move_resp() const;
  void clear_player_move_resp();
  static const int kPlayerMoveRespFieldNumber = 4;
  const ::blockus::PlayerMoveResp& player_move_resp() const;
  ::blockus::PlayerMoveResp* mutable_player_move_resp();
  ::blockus::PlayerMoveResp* release_player_move_resp();
  void set_allocated_player_move_resp(::blockus::PlayerMoveResp* player_move_resp);

  // .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
  bool has_player_move_sync_resp() const;
  void clear_player_move_sync_resp();
  static const int kPlayerMoveSyncRespFieldNumber = 5;
  const ::blockus::PlayerMoveSyncResp& player_move_sync_resp() const;
  ::blockus::PlayerMoveSyncResp* mutable_player_move_sync_resp();
  ::blockus::PlayerMoveSyncResp* release_player_move_sync_resp();
  void set_allocated_player_move_sync_resp(::blockus::PlayerMoveSyncResp* player_move_sync_resp);

  // .blockus.EndGameResp end_game_resp = 6;
  bool has_end_game_resp() const;
  void clear_end_game_resp();
  static const int kEndGameRespFieldNumber = 6;
  const ::blockus::EndGameResp& end_game_resp() const;
  ::blockus::EndGameResp* mutable_end_game_resp();
  ::blockus::EndGameResp* release_end_game_resp();
  void set_allocated_end_game_resp(::blockus::EndGameResp* end_game_resp);

  // .blockus.BlockusResponse.RequestType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::blockus::BlockusResponse_RequestType type() const;
  void set_type(::blockus::BlockusResponse_RequestType value);

  // @@protoc_insertion_point(class_scope:blockus.BlockusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blockus::JoinGameResp* join_game_resp_;
  ::blockus::StartGameResp* start_game_resp_;
  ::blockus::PlayerMoveResp* player_move_resp_;
  ::blockus::PlayerMoveSyncResp* player_move_sync_resp_;
  ::blockus::EndGameResp* end_game_resp_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockusProcess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockus.BlockusProcess) */ {
 public:
  BlockusProcess();
  virtual ~BlockusProcess();

  BlockusProcess(const BlockusProcess& from);

  inline BlockusProcess& operator=(const BlockusProcess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockusProcess(BlockusProcess&& from) noexcept
    : BlockusProcess() {
    *this = ::std::move(from);
  }

  inline BlockusProcess& operator=(BlockusProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockusProcess& default_instance();

  static inline const BlockusProcess* internal_default_instance() {
    return reinterpret_cast<const BlockusProcess*>(
               &_BlockusProcess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(BlockusProcess* other);
  friend void swap(BlockusProcess& a, BlockusProcess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockusProcess* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockusProcess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockusProcess& from);
  void MergeFrom(const BlockusProcess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockusProcess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BlockusProcess_MsgType MsgType;
  static const MsgType REQUEST =
    BlockusProcess_MsgType_REQUEST;
  static const MsgType RESPONSE =
    BlockusProcess_MsgType_RESPONSE;
  static inline bool MsgType_IsValid(int value) {
    return BlockusProcess_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    BlockusProcess_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    BlockusProcess_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    BlockusProcess_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return BlockusProcess_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return BlockusProcess_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return BlockusProcess_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .blockus.BlockusRequest request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::blockus::BlockusRequest& request() const;
  ::blockus::BlockusRequest* mutable_request();
  ::blockus::BlockusRequest* release_request();
  void set_allocated_request(::blockus::BlockusRequest* request);

  // .blockus.BlockusResponse response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  const ::blockus::BlockusResponse& response() const;
  ::blockus::BlockusResponse* mutable_response();
  ::blockus::BlockusResponse* release_response();
  void set_allocated_response(::blockus::BlockusResponse* response);

  // .blockus.BlockusProcess.MsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::blockus::BlockusProcess_MsgType type() const;
  void set_type(::blockus::BlockusProcess_MsgType value);

  // @@protoc_insertion_point(class_scope:blockus.BlockusProcess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::blockus::BlockusRequest* request_;
  ::blockus::BlockusResponse* response_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_blokus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// .blockus.PlayerColor color = 1;
inline void Player::clear_color() {
  color_ = 0;
}
inline ::blockus::PlayerColor Player::color() const {
  // @@protoc_insertion_point(field_get:blockus.Player.color)
  return static_cast< ::blockus::PlayerColor >(color_);
}
inline void Player::set_color(::blockus::PlayerColor value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:blockus.Player.color)
}

// uint32 id = 2;
inline void Player::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:blockus.Player.id)
  return id_;
}
inline void Player::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.Player.id)
}

// string username = 3;
inline void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:blockus.Player.username)
  return username_.GetNoArena();
}
inline void Player::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blockus.Player.username)
}
#if LANG_CXX11
inline void Player::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blockus.Player.username)
}
#endif
inline void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blockus.Player.username)
}
inline void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blockus.Player.username)
}
inline ::std::string* Player::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:blockus.Player.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:blockus.Player.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:blockus.Player.username)
}

// -------------------------------------------------------------------

// JoinGameReq

// string username = 1;
inline void JoinGameReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinGameReq::username() const {
  // @@protoc_insertion_point(field_get:blockus.JoinGameReq.username)
  return username_.GetNoArena();
}
inline void JoinGameReq::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blockus.JoinGameReq.username)
}
#if LANG_CXX11
inline void JoinGameReq::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blockus.JoinGameReq.username)
}
#endif
inline void JoinGameReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blockus.JoinGameReq.username)
}
inline void JoinGameReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blockus.JoinGameReq.username)
}
inline ::std::string* JoinGameReq::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:blockus.JoinGameReq.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinGameReq::release_username() {
  // @@protoc_insertion_point(field_release:blockus.JoinGameReq.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinGameReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:blockus.JoinGameReq.username)
}

// -------------------------------------------------------------------

// JoinGameResp

// .blockus.Player player = 1;
inline bool JoinGameResp::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
inline void JoinGameResp::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
inline const ::blockus::Player& JoinGameResp::player() const {
  const ::blockus::Player* p = player_;
  // @@protoc_insertion_point(field_get:blockus.JoinGameResp.player)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::Player*>(
      &::blockus::_Player_default_instance_);
}
inline ::blockus::Player* JoinGameResp::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::blockus::Player;
  }
  // @@protoc_insertion_point(field_mutable:blockus.JoinGameResp.player)
  return player_;
}
inline ::blockus::Player* JoinGameResp::release_player() {
  // @@protoc_insertion_point(field_release:blockus.JoinGameResp.player)
  
  ::blockus::Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void JoinGameResp::set_allocated_player(::blockus::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.JoinGameResp.player)
}

// -------------------------------------------------------------------

// StartGameReq

// repeated .blockus.Player players = 1;
inline int StartGameReq::players_size() const {
  return players_.size();
}
inline void StartGameReq::clear_players() {
  players_.Clear();
}
inline const ::blockus::Player& StartGameReq::players(int index) const {
  // @@protoc_insertion_point(field_get:blockus.StartGameReq.players)
  return players_.Get(index);
}
inline ::blockus::Player* StartGameReq::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:blockus.StartGameReq.players)
  return players_.Mutable(index);
}
inline ::blockus::Player* StartGameReq::add_players() {
  // @@protoc_insertion_point(field_add:blockus.StartGameReq.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::blockus::Player >*
StartGameReq::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:blockus.StartGameReq.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::blockus::Player >&
StartGameReq::players() const {
  // @@protoc_insertion_point(field_list:blockus.StartGameReq.players)
  return players_;
}

// -------------------------------------------------------------------

// StartGameResp

// -------------------------------------------------------------------

// Location

// uint32 x_position = 1;
inline void Location::clear_x_position() {
  x_position_ = 0u;
}
inline ::google::protobuf::uint32 Location::x_position() const {
  // @@protoc_insertion_point(field_get:blockus.Location.x_position)
  return x_position_;
}
inline void Location::set_x_position(::google::protobuf::uint32 value) {
  
  x_position_ = value;
  // @@protoc_insertion_point(field_set:blockus.Location.x_position)
}

// uint32 y_position = 2;
inline void Location::clear_y_position() {
  y_position_ = 0u;
}
inline ::google::protobuf::uint32 Location::y_position() const {
  // @@protoc_insertion_point(field_get:blockus.Location.y_position)
  return y_position_;
}
inline void Location::set_y_position(::google::protobuf::uint32 value) {
  
  y_position_ = value;
  // @@protoc_insertion_point(field_set:blockus.Location.y_position)
}

// -------------------------------------------------------------------

// PlayerMoveReq

// uint32 id = 1;
inline void PlayerMoveReq::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerMoveReq::id() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveReq.id)
  return id_;
}
inline void PlayerMoveReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveReq.id)
}

// -------------------------------------------------------------------

// PlayerMoveResp

// uint32 id = 1;
inline void PlayerMoveResp::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerMoveResp::id() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveResp.id)
  return id_;
}
inline void PlayerMoveResp::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveResp.id)
}

// .blockus.Piece piece = 2;
inline void PlayerMoveResp::clear_piece() {
  piece_ = 0;
}
inline ::blockus::Piece PlayerMoveResp::piece() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveResp.piece)
  return static_cast< ::blockus::Piece >(piece_);
}
inline void PlayerMoveResp::set_piece(::blockus::Piece value) {
  
  piece_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveResp.piece)
}

// .blockus.Location location = 3;
inline bool PlayerMoveResp::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void PlayerMoveResp::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
inline const ::blockus::Location& PlayerMoveResp::location() const {
  const ::blockus::Location* p = location_;
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveResp.location)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::Location*>(
      &::blockus::_Location_default_instance_);
}
inline ::blockus::Location* PlayerMoveResp::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::blockus::Location;
  }
  // @@protoc_insertion_point(field_mutable:blockus.PlayerMoveResp.location)
  return location_;
}
inline ::blockus::Location* PlayerMoveResp::release_location() {
  // @@protoc_insertion_point(field_release:blockus.PlayerMoveResp.location)
  
  ::blockus::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void PlayerMoveResp::set_allocated_location(::blockus::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.PlayerMoveResp.location)
}

// -------------------------------------------------------------------

// PlayerMoveSyncReq

// uint32 id = 1;
inline void PlayerMoveSyncReq::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerMoveSyncReq::id() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveSyncReq.id)
  return id_;
}
inline void PlayerMoveSyncReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveSyncReq.id)
}

// .blockus.Piece piece = 2;
inline void PlayerMoveSyncReq::clear_piece() {
  piece_ = 0;
}
inline ::blockus::Piece PlayerMoveSyncReq::piece() const {
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveSyncReq.piece)
  return static_cast< ::blockus::Piece >(piece_);
}
inline void PlayerMoveSyncReq::set_piece(::blockus::Piece value) {
  
  piece_ = value;
  // @@protoc_insertion_point(field_set:blockus.PlayerMoveSyncReq.piece)
}

// .blockus.Location location = 3;
inline bool PlayerMoveSyncReq::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void PlayerMoveSyncReq::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
inline const ::blockus::Location& PlayerMoveSyncReq::location() const {
  const ::blockus::Location* p = location_;
  // @@protoc_insertion_point(field_get:blockus.PlayerMoveSyncReq.location)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::Location*>(
      &::blockus::_Location_default_instance_);
}
inline ::blockus::Location* PlayerMoveSyncReq::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::blockus::Location;
  }
  // @@protoc_insertion_point(field_mutable:blockus.PlayerMoveSyncReq.location)
  return location_;
}
inline ::blockus::Location* PlayerMoveSyncReq::release_location() {
  // @@protoc_insertion_point(field_release:blockus.PlayerMoveSyncReq.location)
  
  ::blockus::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void PlayerMoveSyncReq::set_allocated_location(::blockus::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.PlayerMoveSyncReq.location)
}

// -------------------------------------------------------------------

// PlayerMoveSyncResp

// -------------------------------------------------------------------

// EndGameReq

// uint32 id = 1;
inline void EndGameReq::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 EndGameReq::id() const {
  // @@protoc_insertion_point(field_get:blockus.EndGameReq.id)
  return id_;
}
inline void EndGameReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:blockus.EndGameReq.id)
}

// -------------------------------------------------------------------

// EndGameResp

// -------------------------------------------------------------------

// BlockusRequest

// .blockus.BlockusRequest.RequestType type = 1;
inline void BlockusRequest::clear_type() {
  type_ = 0;
}
inline ::blockus::BlockusRequest_RequestType BlockusRequest::type() const {
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.type)
  return static_cast< ::blockus::BlockusRequest_RequestType >(type_);
}
inline void BlockusRequest::set_type(::blockus::BlockusRequest_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:blockus.BlockusRequest.type)
}

// .blockus.JoinGameReq join_game_req = 2;
inline bool BlockusRequest::has_join_game_req() const {
  return this != internal_default_instance() && join_game_req_ != NULL;
}
inline void BlockusRequest::clear_join_game_req() {
  if (GetArenaNoVirtual() == NULL && join_game_req_ != NULL) delete join_game_req_;
  join_game_req_ = NULL;
}
inline const ::blockus::JoinGameReq& BlockusRequest::join_game_req() const {
  const ::blockus::JoinGameReq* p = join_game_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.join_game_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::JoinGameReq*>(
      &::blockus::_JoinGameReq_default_instance_);
}
inline ::blockus::JoinGameReq* BlockusRequest::mutable_join_game_req() {
  
  if (join_game_req_ == NULL) {
    join_game_req_ = new ::blockus::JoinGameReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.join_game_req)
  return join_game_req_;
}
inline ::blockus::JoinGameReq* BlockusRequest::release_join_game_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.join_game_req)
  
  ::blockus::JoinGameReq* temp = join_game_req_;
  join_game_req_ = NULL;
  return temp;
}
inline void BlockusRequest::set_allocated_join_game_req(::blockus::JoinGameReq* join_game_req) {
  delete join_game_req_;
  join_game_req_ = join_game_req;
  if (join_game_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.join_game_req)
}

// .blockus.StartGameReq start_game_req = 3;
inline bool BlockusRequest::has_start_game_req() const {
  return this != internal_default_instance() && start_game_req_ != NULL;
}
inline void BlockusRequest::clear_start_game_req() {
  if (GetArenaNoVirtual() == NULL && start_game_req_ != NULL) delete start_game_req_;
  start_game_req_ = NULL;
}
inline const ::blockus::StartGameReq& BlockusRequest::start_game_req() const {
  const ::blockus::StartGameReq* p = start_game_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.start_game_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::StartGameReq*>(
      &::blockus::_StartGameReq_default_instance_);
}
inline ::blockus::StartGameReq* BlockusRequest::mutable_start_game_req() {
  
  if (start_game_req_ == NULL) {
    start_game_req_ = new ::blockus::StartGameReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.start_game_req)
  return start_game_req_;
}
inline ::blockus::StartGameReq* BlockusRequest::release_start_game_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.start_game_req)
  
  ::blockus::StartGameReq* temp = start_game_req_;
  start_game_req_ = NULL;
  return temp;
}
inline void BlockusRequest::set_allocated_start_game_req(::blockus::StartGameReq* start_game_req) {
  delete start_game_req_;
  start_game_req_ = start_game_req;
  if (start_game_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.start_game_req)
}

// .blockus.PlayerMoveReq player_move_req = 4;
inline bool BlockusRequest::has_player_move_req() const {
  return this != internal_default_instance() && player_move_req_ != NULL;
}
inline void BlockusRequest::clear_player_move_req() {
  if (GetArenaNoVirtual() == NULL && player_move_req_ != NULL) delete player_move_req_;
  player_move_req_ = NULL;
}
inline const ::blockus::PlayerMoveReq& BlockusRequest::player_move_req() const {
  const ::blockus::PlayerMoveReq* p = player_move_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.player_move_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveReq*>(
      &::blockus::_PlayerMoveReq_default_instance_);
}
inline ::blockus::PlayerMoveReq* BlockusRequest::mutable_player_move_req() {
  
  if (player_move_req_ == NULL) {
    player_move_req_ = new ::blockus::PlayerMoveReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.player_move_req)
  return player_move_req_;
}
inline ::blockus::PlayerMoveReq* BlockusRequest::release_player_move_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.player_move_req)
  
  ::blockus::PlayerMoveReq* temp = player_move_req_;
  player_move_req_ = NULL;
  return temp;
}
inline void BlockusRequest::set_allocated_player_move_req(::blockus::PlayerMoveReq* player_move_req) {
  delete player_move_req_;
  player_move_req_ = player_move_req;
  if (player_move_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.player_move_req)
}

// .blockus.PlayerMoveSyncReq player_move_sync_req = 5;
inline bool BlockusRequest::has_player_move_sync_req() const {
  return this != internal_default_instance() && player_move_sync_req_ != NULL;
}
inline void BlockusRequest::clear_player_move_sync_req() {
  if (GetArenaNoVirtual() == NULL && player_move_sync_req_ != NULL) delete player_move_sync_req_;
  player_move_sync_req_ = NULL;
}
inline const ::blockus::PlayerMoveSyncReq& BlockusRequest::player_move_sync_req() const {
  const ::blockus::PlayerMoveSyncReq* p = player_move_sync_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.player_move_sync_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveSyncReq*>(
      &::blockus::_PlayerMoveSyncReq_default_instance_);
}
inline ::blockus::PlayerMoveSyncReq* BlockusRequest::mutable_player_move_sync_req() {
  
  if (player_move_sync_req_ == NULL) {
    player_move_sync_req_ = new ::blockus::PlayerMoveSyncReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.player_move_sync_req)
  return player_move_sync_req_;
}
inline ::blockus::PlayerMoveSyncReq* BlockusRequest::release_player_move_sync_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.player_move_sync_req)
  
  ::blockus::PlayerMoveSyncReq* temp = player_move_sync_req_;
  player_move_sync_req_ = NULL;
  return temp;
}
inline void BlockusRequest::set_allocated_player_move_sync_req(::blockus::PlayerMoveSyncReq* player_move_sync_req) {
  delete player_move_sync_req_;
  player_move_sync_req_ = player_move_sync_req;
  if (player_move_sync_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.player_move_sync_req)
}

// .blockus.EndGameReq end_game_req = 6;
inline bool BlockusRequest::has_end_game_req() const {
  return this != internal_default_instance() && end_game_req_ != NULL;
}
inline void BlockusRequest::clear_end_game_req() {
  if (GetArenaNoVirtual() == NULL && end_game_req_ != NULL) delete end_game_req_;
  end_game_req_ = NULL;
}
inline const ::blockus::EndGameReq& BlockusRequest::end_game_req() const {
  const ::blockus::EndGameReq* p = end_game_req_;
  // @@protoc_insertion_point(field_get:blockus.BlockusRequest.end_game_req)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::EndGameReq*>(
      &::blockus::_EndGameReq_default_instance_);
}
inline ::blockus::EndGameReq* BlockusRequest::mutable_end_game_req() {
  
  if (end_game_req_ == NULL) {
    end_game_req_ = new ::blockus::EndGameReq;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusRequest.end_game_req)
  return end_game_req_;
}
inline ::blockus::EndGameReq* BlockusRequest::release_end_game_req() {
  // @@protoc_insertion_point(field_release:blockus.BlockusRequest.end_game_req)
  
  ::blockus::EndGameReq* temp = end_game_req_;
  end_game_req_ = NULL;
  return temp;
}
inline void BlockusRequest::set_allocated_end_game_req(::blockus::EndGameReq* end_game_req) {
  delete end_game_req_;
  end_game_req_ = end_game_req;
  if (end_game_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusRequest.end_game_req)
}

// -------------------------------------------------------------------

// BlockusResponse

// .blockus.BlockusResponse.RequestType type = 1;
inline void BlockusResponse::clear_type() {
  type_ = 0;
}
inline ::blockus::BlockusResponse_RequestType BlockusResponse::type() const {
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.type)
  return static_cast< ::blockus::BlockusResponse_RequestType >(type_);
}
inline void BlockusResponse::set_type(::blockus::BlockusResponse_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:blockus.BlockusResponse.type)
}

// .blockus.JoinGameResp join_game_resp = 2;
inline bool BlockusResponse::has_join_game_resp() const {
  return this != internal_default_instance() && join_game_resp_ != NULL;
}
inline void BlockusResponse::clear_join_game_resp() {
  if (GetArenaNoVirtual() == NULL && join_game_resp_ != NULL) delete join_game_resp_;
  join_game_resp_ = NULL;
}
inline const ::blockus::JoinGameResp& BlockusResponse::join_game_resp() const {
  const ::blockus::JoinGameResp* p = join_game_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.join_game_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::JoinGameResp*>(
      &::blockus::_JoinGameResp_default_instance_);
}
inline ::blockus::JoinGameResp* BlockusResponse::mutable_join_game_resp() {
  
  if (join_game_resp_ == NULL) {
    join_game_resp_ = new ::blockus::JoinGameResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.join_game_resp)
  return join_game_resp_;
}
inline ::blockus::JoinGameResp* BlockusResponse::release_join_game_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.join_game_resp)
  
  ::blockus::JoinGameResp* temp = join_game_resp_;
  join_game_resp_ = NULL;
  return temp;
}
inline void BlockusResponse::set_allocated_join_game_resp(::blockus::JoinGameResp* join_game_resp) {
  delete join_game_resp_;
  join_game_resp_ = join_game_resp;
  if (join_game_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.join_game_resp)
}

// .blockus.StartGameResp start_game_resp = 3;
inline bool BlockusResponse::has_start_game_resp() const {
  return this != internal_default_instance() && start_game_resp_ != NULL;
}
inline void BlockusResponse::clear_start_game_resp() {
  if (GetArenaNoVirtual() == NULL && start_game_resp_ != NULL) delete start_game_resp_;
  start_game_resp_ = NULL;
}
inline const ::blockus::StartGameResp& BlockusResponse::start_game_resp() const {
  const ::blockus::StartGameResp* p = start_game_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.start_game_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::StartGameResp*>(
      &::blockus::_StartGameResp_default_instance_);
}
inline ::blockus::StartGameResp* BlockusResponse::mutable_start_game_resp() {
  
  if (start_game_resp_ == NULL) {
    start_game_resp_ = new ::blockus::StartGameResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.start_game_resp)
  return start_game_resp_;
}
inline ::blockus::StartGameResp* BlockusResponse::release_start_game_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.start_game_resp)
  
  ::blockus::StartGameResp* temp = start_game_resp_;
  start_game_resp_ = NULL;
  return temp;
}
inline void BlockusResponse::set_allocated_start_game_resp(::blockus::StartGameResp* start_game_resp) {
  delete start_game_resp_;
  start_game_resp_ = start_game_resp;
  if (start_game_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.start_game_resp)
}

// .blockus.PlayerMoveResp player_move_resp = 4;
inline bool BlockusResponse::has_player_move_resp() const {
  return this != internal_default_instance() && player_move_resp_ != NULL;
}
inline void BlockusResponse::clear_player_move_resp() {
  if (GetArenaNoVirtual() == NULL && player_move_resp_ != NULL) delete player_move_resp_;
  player_move_resp_ = NULL;
}
inline const ::blockus::PlayerMoveResp& BlockusResponse::player_move_resp() const {
  const ::blockus::PlayerMoveResp* p = player_move_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.player_move_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveResp*>(
      &::blockus::_PlayerMoveResp_default_instance_);
}
inline ::blockus::PlayerMoveResp* BlockusResponse::mutable_player_move_resp() {
  
  if (player_move_resp_ == NULL) {
    player_move_resp_ = new ::blockus::PlayerMoveResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.player_move_resp)
  return player_move_resp_;
}
inline ::blockus::PlayerMoveResp* BlockusResponse::release_player_move_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.player_move_resp)
  
  ::blockus::PlayerMoveResp* temp = player_move_resp_;
  player_move_resp_ = NULL;
  return temp;
}
inline void BlockusResponse::set_allocated_player_move_resp(::blockus::PlayerMoveResp* player_move_resp) {
  delete player_move_resp_;
  player_move_resp_ = player_move_resp;
  if (player_move_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.player_move_resp)
}

// .blockus.PlayerMoveSyncResp player_move_sync_resp = 5;
inline bool BlockusResponse::has_player_move_sync_resp() const {
  return this != internal_default_instance() && player_move_sync_resp_ != NULL;
}
inline void BlockusResponse::clear_player_move_sync_resp() {
  if (GetArenaNoVirtual() == NULL && player_move_sync_resp_ != NULL) delete player_move_sync_resp_;
  player_move_sync_resp_ = NULL;
}
inline const ::blockus::PlayerMoveSyncResp& BlockusResponse::player_move_sync_resp() const {
  const ::blockus::PlayerMoveSyncResp* p = player_move_sync_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.player_move_sync_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::PlayerMoveSyncResp*>(
      &::blockus::_PlayerMoveSyncResp_default_instance_);
}
inline ::blockus::PlayerMoveSyncResp* BlockusResponse::mutable_player_move_sync_resp() {
  
  if (player_move_sync_resp_ == NULL) {
    player_move_sync_resp_ = new ::blockus::PlayerMoveSyncResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.player_move_sync_resp)
  return player_move_sync_resp_;
}
inline ::blockus::PlayerMoveSyncResp* BlockusResponse::release_player_move_sync_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.player_move_sync_resp)
  
  ::blockus::PlayerMoveSyncResp* temp = player_move_sync_resp_;
  player_move_sync_resp_ = NULL;
  return temp;
}
inline void BlockusResponse::set_allocated_player_move_sync_resp(::blockus::PlayerMoveSyncResp* player_move_sync_resp) {
  delete player_move_sync_resp_;
  player_move_sync_resp_ = player_move_sync_resp;
  if (player_move_sync_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.player_move_sync_resp)
}

// .blockus.EndGameResp end_game_resp = 6;
inline bool BlockusResponse::has_end_game_resp() const {
  return this != internal_default_instance() && end_game_resp_ != NULL;
}
inline void BlockusResponse::clear_end_game_resp() {
  if (GetArenaNoVirtual() == NULL && end_game_resp_ != NULL) delete end_game_resp_;
  end_game_resp_ = NULL;
}
inline const ::blockus::EndGameResp& BlockusResponse::end_game_resp() const {
  const ::blockus::EndGameResp* p = end_game_resp_;
  // @@protoc_insertion_point(field_get:blockus.BlockusResponse.end_game_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::EndGameResp*>(
      &::blockus::_EndGameResp_default_instance_);
}
inline ::blockus::EndGameResp* BlockusResponse::mutable_end_game_resp() {
  
  if (end_game_resp_ == NULL) {
    end_game_resp_ = new ::blockus::EndGameResp;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusResponse.end_game_resp)
  return end_game_resp_;
}
inline ::blockus::EndGameResp* BlockusResponse::release_end_game_resp() {
  // @@protoc_insertion_point(field_release:blockus.BlockusResponse.end_game_resp)
  
  ::blockus::EndGameResp* temp = end_game_resp_;
  end_game_resp_ = NULL;
  return temp;
}
inline void BlockusResponse::set_allocated_end_game_resp(::blockus::EndGameResp* end_game_resp) {
  delete end_game_resp_;
  end_game_resp_ = end_game_resp;
  if (end_game_resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusResponse.end_game_resp)
}

// -------------------------------------------------------------------

// BlockusProcess

// .blockus.BlockusProcess.MsgType type = 1;
inline void BlockusProcess::clear_type() {
  type_ = 0;
}
inline ::blockus::BlockusProcess_MsgType BlockusProcess::type() const {
  // @@protoc_insertion_point(field_get:blockus.BlockusProcess.type)
  return static_cast< ::blockus::BlockusProcess_MsgType >(type_);
}
inline void BlockusProcess::set_type(::blockus::BlockusProcess_MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:blockus.BlockusProcess.type)
}

// .blockus.BlockusRequest request = 2;
inline bool BlockusProcess::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void BlockusProcess::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::blockus::BlockusRequest& BlockusProcess::request() const {
  const ::blockus::BlockusRequest* p = request_;
  // @@protoc_insertion_point(field_get:blockus.BlockusProcess.request)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::BlockusRequest*>(
      &::blockus::_BlockusRequest_default_instance_);
}
inline ::blockus::BlockusRequest* BlockusProcess::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::blockus::BlockusRequest;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusProcess.request)
  return request_;
}
inline ::blockus::BlockusRequest* BlockusProcess::release_request() {
  // @@protoc_insertion_point(field_release:blockus.BlockusProcess.request)
  
  ::blockus::BlockusRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void BlockusProcess::set_allocated_request(::blockus::BlockusRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusProcess.request)
}

// .blockus.BlockusResponse response = 3;
inline bool BlockusProcess::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void BlockusProcess::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::blockus::BlockusResponse& BlockusProcess::response() const {
  const ::blockus::BlockusResponse* p = response_;
  // @@protoc_insertion_point(field_get:blockus.BlockusProcess.response)
  return p != NULL ? *p : *reinterpret_cast<const ::blockus::BlockusResponse*>(
      &::blockus::_BlockusResponse_default_instance_);
}
inline ::blockus::BlockusResponse* BlockusProcess::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::blockus::BlockusResponse;
  }
  // @@protoc_insertion_point(field_mutable:blockus.BlockusProcess.response)
  return response_;
}
inline ::blockus::BlockusResponse* BlockusProcess::release_response() {
  // @@protoc_insertion_point(field_release:blockus.BlockusProcess.response)
  
  ::blockus::BlockusResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void BlockusProcess::set_allocated_response(::blockus::BlockusResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:blockus.BlockusProcess.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blockus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blockus::BlockusRequest_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blockus::BlockusRequest_RequestType>() {
  return ::blockus::BlockusRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::blockus::BlockusResponse_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blockus::BlockusResponse_RequestType>() {
  return ::blockus::BlockusResponse_RequestType_descriptor();
}
template <> struct is_proto_enum< ::blockus::BlockusProcess_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blockus::BlockusProcess_MsgType>() {
  return ::blockus::BlockusProcess_MsgType_descriptor();
}
template <> struct is_proto_enum< ::blockus::PlayerColor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blockus::PlayerColor>() {
  return ::blockus::PlayerColor_descriptor();
}
template <> struct is_proto_enum< ::blockus::Piece> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blockus::Piece>() {
  return ::blockus::Piece_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_blokus_2eproto__INCLUDED
